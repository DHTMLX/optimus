// Type definitions for DHTMLX 5.0.8
// Project: http://dhtmlx.com
// Definitions by: Anton Aksionau <http://github.com/ikari132>

type ICallable = (...args: any[]) => any;
interface IdhtmlXAccordionConfig {
	parent: string | HTMLElement;
	icons_path?: string;
	skin?: string;
	multi_mode?: boolean;
	dnd?: boolean;
	items?: {
		id: string;
		text?: string;
		icon?: string;
		open?: boolean;
		height?: number;
	}[];
}

interface IdhtmlXCarouselConfig {
	parent: string | HTMLElement;
	skin?: string;
	item_width?: string;
	item_height?: string;
	offset_left?: number;
	offset_top?: number;
	offset_item?: number;
	touch_scroll?: boolean;
}

type Charts = "bar" | "line" | "pie" | "area" | "area" | "radar" | "scatter";
type func<T> = (data: any) => T;
type sortFunc = (a: any, b: any) => number;

interface IdhtmlXChartConfig {
	view: Charts;
	container: string | HTMLElement;
	value: string;
	label: string;
	alpha?: func<number>;
	border?: boolean;
	color?: string | func<string>;
	gradient?: string | any;
	padding?: {
		top?: number;
		bottom?: number;
		left?: number;
		right?: number;
	};
	wigth?: number;
	radius?: number;
	tooltip?: string | { template: string; dx: number; dy: number };
	legend?: {
		width: number;
		align: string;
		valign: string;
		marker: {
			type: string;
			width: number;
		};
		values: { text: string; color: string; }[];
	};
	origin?: number;
	xAxis?: {
		title: string;
		template: string;
		lines: boolean;
	};
	yAxis?: {
		start: number;
		end: number;
		step: number;
		title: string;
	};
	group?: {
		by: string;
		map: any;
	};
	sort?: {
		by: string;
		dir: string;
		as: "int" | "string" | "string_strict" | sortFunc;
	};
	line?: {
		color: string;
		width: number;
	};
	shadow?: boolean;
	cant?: number;
	labelOffset?: number;
	pieInnerText?: string;

	fill?: string | func<string>;
	item?: {
		borderColor: string;
		color: string;
	};
}

interface IdhtmlXColorPickerConfig {
	parent: string | HTMLElement;
	input?: string;
	target_color?: string;
	target_value?: string;
	color?: string;
	custom_colors?: string[] | number[][];
	hide?: boolean;
	closeable?: boolean;
}

interface IdhtmlXComboConfig {
	parent: string | HTMLElement;
	items?: { value: string; text: string; }[];
	onChange?: () => void;
}

interface IDataStoreConfig {
	url: string;
	datatype: string;
	data: any[];
	dataFeed: string;
	scheme: any;
}

interface IdhtmlXDataViewConfig {
	container: string | HTMLElement;
	drag?: boolean;
	select?: string | boolean;
	type?: string | any;
	height?: string;
	pager?: any;
	tooltip?: any;
	autowidth?: number | boolean;
}

interface IdhtmlXEditorConfig {
	parent: string | HTMLElement;
	toolbar?: boolean;
	iconsPath?: string;
	content?: string;
	contentHTML?: string;
	skin?: string;
	onFocusChanged?: func<void>;
	onAccess?: () => void;
}

interface IdhtmlXFormConfig {
	type: string;
	name: string;
	value: string;
	checked: boolean;
	label: string;
}

interface IdhtmlXLayoutConfig {
	parent: string | HTMLElement;
	pattern: string;
	skin?: string;
	offsets?: {
		top?: number;
		right?: number;
		bottom?: number;
		left?: number;
	};
	cells?: {
		id: string;
		text: string;
		collapsed_text?: string;
		header?: boolean;
		width?: number;
		height?: number;
		collapse?: boolean;
		fix_size?: boolean[];
	}[];
}

interface IdhtmlXListConfig {
	container: string | HTMLElement;
	drag?: boolean;
	select?: string | boolean;
	type?: string | any;
	height?: string;
	pager?: any;
	tooltip?: any;
}

interface IdhtmlXMenuConfig {
	parent: string | HTMLElement;
	image_path?: string;
	skin?: string;
	iconset?: string;
	align?: string;
	auto_hide?: boolean;
	auto_show?: boolean;
	caption?: string;
	context?: boolean;
	dynamic?: string;
	icon_path?: string;
	open_mode?: string;
	xml?: string;
}

interface IdhtmlXPopupConfig {
	id: string | string[];
	form?: dhtmlXForm;
	toolbar?: dhtmlXToolbarObject;
	ribbon?: dhtmlXRibbon;
	slider?: dhtmlXSlider;
}

interface IdhtmlXRibbonConfig {
	parent: string | HTMLElement;
	icons_path?: string;
	arrows_mode?: string;
	onClick?: () => void;
	tabs?: {
		id: string;
		text: string;
		items: {
			type: string;
			text: string;
			text_pos?: string;
			mode?: string;
			list?: { type: string; text: string; }[];
		}[];
	}[];
}

interface IdhtmlXSideBarConfig {
	parent: string | HTMLElement;
	skin: string;
	template: string;
	icons_path?: string;
	single_cell?: boolean;
	bubble?: number;
	width?: number;
	header?: boolean;
	autohide?: boolean;
	xml?: string;
	json?: string;
	onload?: () => void;
	items?: {
		id: string;
		text: string;
		icon?: string;
		selected?: boolean;
	}[];
}

interface IdhtmlxSliderConfig {
	parent: string | HTMLElement;
	size: number;
	value: number;
	step: number;
	skin: string;
	min: number;
	max: number;
	vertical: boolean;
	linkTo: string;
	inverse: boolean;
	disabled: boolean;
	tooltip: any;
	visible: boolean;
}

interface IdhtmlXTabBarConfig {
	parent: string | HTMLElement;
	skin?: string;
	mode?: string;
	align?: string;
	close_button?: boolean;
	content_zone?: boolean;
	xml?: string;
	json?: string;
	onload?: () => void;
	arrows_mode?: string;
	tabs?: {
		id: string;
		text: string;
		width?: number | null;
		index?: number | null;
		active?: boolean;
		enabled?: boolean;
		close?: boolean;
	}[];
}

interface IdhtmlXToolbarConfig {
	parent: string | HTMLElement;
	items?: {
		id: string;
		type: string;
		text: string;
		img: string;
		img_disabled: string;
	}[];
}
interface IdhtmlXTreeViewConfig {
	parent: string;
	skin?: string;
	iconset?: string;
	multiselect?: boolean;
	checkboxes?: boolean;
	dnd?: boolean;
	context_menu?: boolean;
	json?: string;
	xml?: string;
	items?: any[],
	onload?: () => void;
}
interface IdhtmlXVaultConfig {
	container: string | HTMLElement;
	uploadUrl: string;
	swfPath: string;
	swfUrl: string;
	slXap: string;
	slUrl: string;
	skin?: string;
	autoStart?: boolean;
	autoRemove?: boolean;
	buttonUpload?: boolean;
	buttonClear?: boolean;
	filesLimit?: number;
	paramName?: string;
	multiple?: boolean;
	maxFileSize?: number;
}

interface IdhtmlXWindowsConfig {
	id: string;
	left?: number;
	top?: number;
	width?: number;
	height?: number;
	center?: boolean;
	onClose?: () => void
}

interface IMessageConfig {
	type: string,
	text: string,
	title?: string,
	ok?: string
}

declare namespace dhtmlx {
	function alert(conf: IMessageConfig): void;
	function confitm(conf: IMessageConfig): void;
	function message(conf: IMessageConfig): void;
}
declare type dhtmlXScheduler = any;

declare namespace dhx {
	function absLeft(obj: string | number | HTMLElement): number;
	function absTop(obj: string | number | HTMLElement): number;
	function attachEvent(name: string, handler: ICallable): number;
	function date2str(val: string, format: string): string;
	function detachEvent(id: number): void;
	function newId(): number;
	function s2b(value: string | number | boolean): boolean;
	function s2j(str: string): string;
	function screenDim(): any;
	function selectTextRange(inp: string | number | HTMLElement, start: number, end: number): void;
	function str2date(val: string, format: string): string;
	function trim(str: string): string;

	const ajax: dhtmlxAjax;
	const dateFormat: any;
	const dateLang: any;
	const dateStrings: any;
	const isChrome: boolean;
	const isEdge: boolean;
	const isFF: boolean;
	const isIE: boolean;
	const isIE10: boolean;
	const isIE11: boolean;
	const isIE6: boolean;
	const isIE7: boolean;
	const isIE8: boolean;
	const isIE9: boolean;
	const isIPad: boolean;
	const isKHTML: boolean;
	const isOpera: boolean;
	const version: boolean;
}

type dhtmlxAjaxEventName = 'onAjaxError' | 'onLoadXMLError';
interface dhtmlxAjax {
	del(url: string, params?: string, callback?: ICallable): void;
	get(url: string, callback?: ICallable): void;
	getSync(url: string): any;
	post(url: string, params?: string, callback?: ICallable): void;
	postSync(url: string, params?: string): any;
	put(url: string, params?: string, callback?: ICallable): void;
	query(method: string, url: string, data: string, async: boolean, callback?: ICallable, headers?: any): void;
}

type dataProcessorEventName = 'onAfterUpdate' | 'onAfterUpdateFinish' | 'onBeforeDataSending' | 'onBeforeUpdate' | 'onFullSync' | 'onRowMark' | 'onValidationError';

declare class dataProcessor {
	clearVerificator(index: number): void;
	defineAction(status: string, handler: ICallable): void;
	enableDataNames(mode: boolean): void;
	enableDebug(mode: boolean): void;
	enablePartialDataSend(mode: boolean): void;
	enableUTFencoding(mode: boolean): void;
	getState(id: string | number): string;
	getSyncState(): boolean;
	ignore(code: ICallable): void;
	init(obj: any): void;
	sendData(id?: string | number): void;
	setTransactionMode(mode: string, total: boolean): void;
	setUpdateMode(mode: string, dnd: boolean): void;
	setUpdated(rowId: string | number, mode?: boolean, state?: string): void;
	setVerificator(index: number, verifyFunc: ICallable): void;
	url(): void;
}

type DataStoreEventName = 'onAfterAdd' | 'onAfterCursorChange' | 'onAfterDelete' | 'onBeforeAdd' | 'onBeforeCursorChange' | 'onBeforeDelete' | 'onDataRequest' | 'onLoadError' | 'onStoreUpdated' | 'onXLE' | 'onXLS';

declare class DataStore {
	constructor(config?: IDataStoreConfig);
	add(): void;
	attachEvent(name: DataStoreEventName, handler: ICallable): number;
	bind(target: any, rule: ICallable): void;
	clearAll(): void;
	dataCount(): void;
	detachEvent(id: number): void;
	exists(): void;
	filter(): void;
	first(): void;
	getCursor(): string;
	idByIndex(): void;
	indexById(): void;
	item(): void;
	last(): void;
	load(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	next(): void;
	parse(): void;
	previous(): void;
	remove(): void;
	saveBatch(): void;
	serialize(): void;
	setCursor(id: string): void;
	sort(): void;
	sync(target: any, rule?: any): void;
	unbind(): void;
	update(id: string | number, data: any): void;

}
type dhtmlXAccordionEventName = 'onActive' | 'onBeforeActive' | 'onBeforeDrag' | 'onContentLoaded' | 'onDock' | 'onDrop' | 'onUnDock' | 'onXLE' | 'onXLS';

declare class dhtmlXAccordion {
	constructor(config: IdhtmlXAccordionConfig | string | HTMLElement, skin?: string);
	addItem(id: string | number, text: string, open?: boolean, height?: number, icon?: string): void;
	attachEvent(name: dhtmlXAccordionEventName, handler: ICallable): number;
	attachFooter(id: string | number | HTMLElement, height?: number): void;
	attachHeader(id: string | number | HTMLElement, height?: number): void;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachStatusBar(conf?: any): any;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	cells(id: string | number): dhtmlXCell;
	clearIcon(): void;
	closeItem(): void;
	detachEvent(id: number): void;
	detachFooter(): void;
	detachHeader(): void;
	detachMenu(): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	enableDND(): void;
	enableMultiMode(yScrollMode?: string, defaultHeight?: number): void;
	forEachItem(handler: ICallable): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getText(): void;
	hideItem(): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	isActive(): void;
	isItemHidden(): void;
	loadJSON(): void;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	loadXML(): void;
	moveOnTop(): void;
	openItem(): void;
	progressOff(): void;
	progressOn(): void;
	removeItem(id: string | number): void;
	setActive(): void;
	setEffect(): void;
	setIcon(): void;
	setIconsPath(path: string): void;
	setIconset(name: string): void;
	setItemHeight(): void;
	setOffset(offset: number): void;
	setOffsets(conf: any): void;
	setSizes(): void;
	setSkin(skin: string): void;
	setSkinParameters(): void;
	setText(): void;
	showItem(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	unload(): void;

	dhxWins: dhtmlXWindows;
}

declare class dhtmlXAccordionCell extends dhtmlXCell {
	constructor(config?: any);
	appendObject(obj: string | number | HTMLElement): void;
	attachAccordion(conf: any): dhtmlXAccordion;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachChart(conf: any): dhtmlXChart;
	attachDataView(conf: any): dhtmlXDataView;
	attachEditor(): dhtmlXEditor;
	attachForm(conf: any): dhtmlXForm;
	attachGrid(): dhtmlXGridObject;
	attachHTMLString(htmlString: string): void;
	attachLayout(conf: any): dhtmlXLayoutObject;
	attachList(conf: any): dhtmlXList;
	attachMap(opts?: any): any;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachObject(obj: any): void;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachScheduler(day?: Date, mode?: string, contId?: string, scheduler?: dhtmlXScheduler): dhtmlXScheduler;
	attachSidebar(conf?: any): dhtmlXSideBar;
	attachStatusBar(conf?: any): { [key: string]: any; };
	attachTabbar(conf?: any): dhtmlXTabBar;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	attachTree(rootId?: any): dhtmlXTreeObject;
	attachTreeView(conf?: any): dhtmlXTreeViewObject;
	attachURL(url: string, ajax?: boolean, postData?: any): void;
	attachVault(conf: any): dhtmlXVaultObject;
	clearIcon(): void;
	close(callEvent: boolean): void;
	detachMenu(): void;
	detachObject(remove?: boolean, moveTo?: string | number | HTMLElement): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	dock(): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getFrame(): HTMLElement;
	getId(): string | number;
	getText(): string;
	getViewName(): string;
	hide(): void;
	hideHeader(): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	isHeaderVisible(): boolean;
	isOpened(): boolean;
	isVisible(): boolean;
	moveOnTop(): void;
	open(callEvent: boolean): void;
	progressOff(): void;
	progressOn(): void;
	reloadURL(): void;
	setHeight(height: any): void;
	setIcon(icon: string): void;
	setText(text: any): void;
	show(): void;
	showHeader(): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	showView(name: string): boolean;
	undock(x?: number, y?: number, width?: number, height?: number): void;
	unloadView(name: string): void;

}
type dhtmlXCalendarObjectEventName = 'onArrowClick' | 'onBeforeChange' | 'onButtonClick' | 'onChange' | 'onClick' | 'onHide' | 'onMouseOut' | 'onMouseOver' | 'onPopupHide' | 'onPopupShow' | 'onShow' | 'onTimeChange';

declare class dhtmlXCalendarObject {
	constructor(id: string | string[]);
	attachEvent(name: dhtmlXCalendarObjectEventName, handler: ICallable): number;
	attachObj(input: string | number | HTMLElement): string | number;
	clearInsensitiveDays(): void;
	clearSensitiveRange(): void;
	clearTooltip(date: Date | string): void;
	close(): void;
	detachEvent(id: number): void;
	detachObj(obj: string | number | HTMLElement): void;
	disableDays(mode: string, date: string | number | any[]): void;
	draw(): void;
	enableDays(mode: string): void;
	enableIframe(mode: boolean): void;
	getCellDimension(date: Date | string): any;
	getDate(isFormatted: boolean): Date | string;
	getFormatedDate(format: string, date: Date): string;
	getPopup(): dhtmlXPopup;
	getWeekNumber(date: Date | string): number;
	hide(): void;
	hideTime(): void;
	hideToday(): void;
	hideWeekNumbers(): void;
	isVisible(): boolean;
	loadUserLanguage(lang: string): void;
	setDate(date: Date | string): void;
	setDateFormat(format: string): void;
	setFormatedDate(format: string, date: string): void;
	setHolidays(date: Date | string | any[]): void;
	setInsensitiveDays(date: Date | string | any[]): void;
	setInsensitiveRange(from: Date | string, to: Date | string): void;
	setMinutesInterval(interval: number): void;
	setParent(container: string | number | HTMLElement): void;
	setPosition(pos: string): void;
	setSensitiveRange(from: Date | string, to: Date | string): void;
	setSkin(skin: string): void;
	setTooltip(date: Date | string | any[], text: string, showIcon: boolean, usePopup: boolean): void;
	setWeekStartDay(day: number): void;
	setYearsRange(): void;
	show(): void;
	showMonth(date: Date | string): void;
	showTime(): void;
	showToday(): void;
	showWeekNumbers(): void;
	unload(): void;

	lang: string;
	langData: any;
}
type dhtmlXCarouselEventName = 'onContentLoaded' | 'onSelect';

declare class dhtmlXCarousel {
	constructor(config: IdhtmlXCarouselConfig | string);
	addCell(id: string | number, index: number): void;
	attachEvent(name: dhtmlXCarouselEventName, handler: ICallable): number;
	attachFooter(id: string | number | HTMLElement, height?: number): void;
	attachHeader(id: string | number | HTMLElement, height?: number): void;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachStatusBar(conf?: any): any;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	cells(id: string | number): dhtmlXCarouselCell;
	detachEvent(id: number): void;
	detachFooter(): void;
	detachHeader(): void;
	detachMenu(): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	enableHotKeys(mode: boolean): void;
	forEachCell(handler: ICallable): void;
	getActiveCell(): any;
	getActiveId(): string | number;
	getActiveIndex(): number;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	goFirst(): void;
	goLast(): void;
	goNext(): void;
	goPrev(): void;
	hideControls(): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	progressOff(): void;
	progressOn(): void;
	setCellSize(width: string | number, height: string | number): void;
	setOffset(left: number, top: number, item: number): void;
	setOffsets(conf: any): void;
	setSizes(): void;
	showControls(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	unload(): void;

}

declare class dhtmlXCarouselCell extends dhtmlXCell {
	constructor(config?: any);
	appendObject(obj: string | number | HTMLElement): void;
	attachAccordion(conf: any): dhtmlXAccordion;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachChart(conf: any): dhtmlXChart;
	attachDataView(conf: any): dhtmlXDataView;
	attachEditor(): dhtmlXEditor;
	attachForm(conf: any): dhtmlXForm;
	attachGrid(): dhtmlXGridObject;
	attachHTMLString(htmlString: string): void;
	attachLayout(conf: any): dhtmlXLayoutObject;
	attachList(conf: any): dhtmlXList;
	attachMap(opts?: any): any;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachObject(obj: any): void;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachScheduler(day?: Date, mode?: string, contId?: string, scheduler?: dhtmlXScheduler): dhtmlXScheduler;
	attachSidebar(conf?: any): dhtmlXSideBar;
	attachStatusBar(conf?: any): { [key: string]: any; };
	attachTabbar(conf?: any): dhtmlXTabBar;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	attachTree(rootId?: any): dhtmlXTreeObject;
	attachTreeView(conf?: any): dhtmlXTreeViewObject;
	attachURL(url: string, ajax?: boolean, postData?: any): void;
	attachVault(conf: any): dhtmlXVaultObject;
	detachMenu(): void;
	detachObject(remove?: boolean, moveTo?: string | number | HTMLElement): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getFrame(): HTMLElement;
	getId(): string | number;
	getIndex(): number;
	getViewName(): string;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	progressOff(): void;
	progressOn(): void;
	reloadURL(): void;
	remove(): void;
	setActive(): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	showView(name: string): boolean;
	unloadView(name: string): void;

}

declare class dhtmlXCell {
	constructor(config?: any)
	appendObject(obj: string | number | HTMLElement): void;
	attachAccordion(conf: any): dhtmlXAccordion;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachChart(conf: any): dhtmlXChart;
	attachDataView(conf: any): dhtmlXDataView;
	attachEditor(): dhtmlXEditor;
	attachForm(conf: any): dhtmlXForm;
	attachGrid(): dhtmlXGridObject;
	attachHTMLString(htmlString: string): void;
	attachLayout(conf: any): dhtmlXLayoutObject;
	attachList(conf: any): dhtmlXList;
	attachMap(opts?: any): any;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachObject(obj: any): void;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachScheduler(day?: Date, mode?: string, contId?: string, scheduler?: dhtmlXScheduler): dhtmlXScheduler;
	attachSidebar(conf?: any): dhtmlXSideBar;
	attachStatusBar(conf?: any): { [key: string]: any; };
	attachTabbar(conf?: any): dhtmlXTabBar;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	attachTree(rootId?: any): dhtmlXTreeObject;
	attachTreeView(conf?: any): dhtmlXTreeViewObject;
	attachURL(url: string, ajax?: boolean, postData?: any): void;
	attachVault(conf: any): dhtmlXVaultObject;
	detachMenu(): void;
	detachObject(remove?: boolean, moveTo?: string | number | HTMLElement): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getFrame(): HTMLElement;
	getId(): string | number;
	getViewName(): string;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	progressOff(): void;
	progressOn(): void;
	reloadURL(): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	showView(name: string): boolean;
	unloadView(name: string): void;

}
type dhtmlXChartEventName = 'onAfterAdd' | 'onAfterDelete' | 'onAfterRender' | 'onAfterSort' | 'onBeforeAdd' | 'onBeforeContextMenu' | 'onBeforeDelete' | 'onBeforeRender' | 'onBeforeSort' | 'onItemClick' | 'onItemDblClick' | 'onLegendClick' | 'onMouseMove' | 'onMouseMoving' | 'onMouseOut' | 'onXLE' | 'onXLS';

declare class dhtmlXChart {
	constructor(config: IdhtmlXChartConfig);
	add(obj: any): void;
	addSeries(obj: any, view: string, value: string, color: string, label: string): void;
	attachEvent(name: dhtmlXChartEventName, handler: ICallable): number;
	clearAll(): void;
	dataCount(): void;
	define(property: string, value: string): void;
	destructor(): void;
	detachEvent(id: number): void;
	exists(id: string | number): void;
	filter(key: string, value: string): void;
	first(): void;
	get(id: string | number): void;
	group(by: string, map: any): void;
	hideSeries(index: number): void;
	idByIndex(index: number): void;
	indexById(id: string | number): void;
	last(): void;
	load(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	next(id: string | number): void;
	parse(data: any, type: string): void;
	previous(id: string | number): void;
	refresh(): void;
	remove(id: number): void;
	render(): void;
	serialize(): any;
	set(id: string | number, hash: any): void;
	showSeries(index: number): void;
	sort(): void;
	ungroup(): void;
	update(id: string, data: any): void;

	$view: Node;
}
type dhtmlXColorPickerEventName = 'onCancel' | 'onChange' | 'onHide' | 'onSaveColor' | 'onSelect' | 'onShow';

declare class dhtmlXColorPicker {
	constructor(config: IdhtmlXColorPickerConfig | string | string[]);
	attachEvent(name: dhtmlXColorPickerEventName, handler: ICallable): number;
	close(): void;
	detachEvent(id: number): void;
	dhtmlXColorPickerInput(inputs: any[]): void;
	getCustomColors(): any[];
	getSelectedColor(): any[];
	hide(): void;
	hideMemory(): void;
	hideOnSelect(flag: boolean): void;
	init(): void;
	isVisible(): boolean;
	linkTo(obj1: any, obj2: any, obj3?: any): void;
	loadUserLanguage(lang: string): void;
	setColor(color: string | string[]): void;
	setCustomColors(color: string | string[]): void;
	setImagePath(): void;
	setOnCancelHandler(func: ICallable): void;
	setOnSelectHandler(func: ICallable): void;
	setPosition(x: number, y: number): void;
	setSkin(name: string): void;
	show(): void;
	showMemory(): void;
	unload(): void;
}
type dhtmlXComboEventName = 'onBeforeCheck' | 'onBlur' | 'onChange' | 'onCheck' | 'onClose' | 'onDynXLS' | 'onFocus' | 'onKeyPressed' | 'onOpen' | 'onSelectionChange' | 'onSyncApply' | 'onXLE' | 'onXLS';

declare class dhtmlXCombo {
	constructor(config: IdhtmlXComboConfig);
	constructor(parent: string | HTMLElement, name: string, width: string, type?: any, index?: string | number, filter?: boolean, xml?: string, readonly?: boolean);
	addOption(options: string | string[]): void;
	allowFreeText(state: boolean): void;
	attachChildCombo(): void;
	attachEvent(name: dhtmlXComboEventName, handler: ICallable): number;
	clearAll(hideList: boolean): void;
	closeAll(): void;
	confirmValue(): void;
	deleteOption(value: string): void;
	destructor(): void;
	detachEvent(id: number): void;
	disable(mode: boolean): void;
	disableAutocomplete(): void;
	enable(mode: boolean): void;
	enableAutocomplete(): void;
	enableFilteringMode(mode: string | boolean, url: string, cache: boolean, autoSubLoad: boolean): void;
	enableOptionAutoHeight(flag: boolean, maxHeight: number): void;
	enableOptionAutoPositioning(flag: boolean): void;
	enableOptionAutoWidth(flag: boolean): void;
	filter(handler: ICallable, showList: boolean): void;
	forEachOption(handler: ICallable): void;
	getActualValue(): string;
	getBase(): HTMLElement;
	getButton(): HTMLElement;
	getChecked(index: number): any[];
	getComboText(): string;
	getIndexByValue(value: string): number;
	getInput(): HTMLElement;
	getList(): HTMLElement;
	getOption(value: string): any;
	getOptionByIndex(ind: number): any;
	getOptionByLabel(label: string): any;
	getOptionsCount(): number;
	getParent(): HTMLElement;
	getSelectedIndex(): number;
	getSelectedText(): string;
	getSelectedValue(): string;
	hide(): void;
	isChecked(index: number): boolean;
	isEnabled(): boolean;
	isVisible(): boolean;
	load(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	loadXML(url: string): void;
	loadXMLString(string: string): void;
	openSelect(): void;
	readonly(mode: boolean): void;
	render(mode: boolean): void;
	selectOption(ind: number, filter: boolean, conf: boolean): void;
	setAutoSubCombo(): void;
	setChecked(index: number, state: boolean): void;
	setComboText(text: string): void;
	setComboValue(value: string): void;
	setDefaultImage(url: string): void;
	setFilterHandler(handler: ICallable): void;
	setFocus(): void;
	setFontSize(sizeInp: string, sizeList: string): void;
	setImagePath(path: string): void;
	setName(name: string): void;
	setOptionHeight(height: number): void;
	setOptionIndex(value: string, index: number): void;
	setOptionWidth(width: number): void;
	setPlaceholder(text: string): void;
	setSize(new_size: number): void;
	setSkin(skin: string): void;
	setTemplate(data: any): void;
	show(mode: boolean): void;
	sort(mode: string | ICallable): void;
	unSelectOption(): void;
	unload(): void;
	updateOption(oldvalue: string, avalue: string, atext: string, accs: string): void;

	DOMParent: any;
	DOMelem: any;
	DOMelem_button: boolean;
	DOMelem_input: any;
	DOMlist: any;
}
type dhtmlXDataViewEventName = 'onAfterAdd' | 'onAfterDelete' | 'onAfterDrop' | 'onAfterEditStart' | 'onAfterEditStop' | 'onAfterRender' | 'onAfterSelect' | 'onBeforeAdd' | 'onBeforeContextMenu' | 'onBeforeDelete' | 'onBeforeDrag' | 'onBeforeDragIn' | 'onBeforeDrop' | 'onBeforeEditStart' | 'onBeforeEditStop' | 'onBeforeRender' | 'onBeforeSelect' | 'onDataRequest' | 'onDragOut' | 'onEditKeyPress' | 'onItemClick' | 'onItemDblClick' | 'onItemRender' | 'onMouseMove' | 'onMouseMoving' | 'onMouseOut' | 'onSelectChange' | 'onXLE' | 'onXLS';

declare class dhtmlXDataView {
	constructor(config: IdhtmlXDataViewConfig | string);
	add(obj: any, index: number): void;
	attachEvent(name: dhtmlXDataViewEventName, handler: ICallable): number;
	changeId(oldId: string, newId: string): void;
	clearAll(): void;
	copy(sid: string | number, tindex?: number, tobj?: any, tid?: string | number): void;
	customize(properties: any): void;
	dataCount(): number;
	define(mode: string, value: boolean): void;
	destructor(): void;
	detachEvent(id: number): void;
	edit(id: string | number): void;
	exists(id: string | number): boolean;
	filter(key: string | ICallable, value: string): void;
	first(): string | number;
	get(id: string | number): any;
	getSelected(as_array: boolean): string | number;
	idByIndex(index: number): string | number;
	indexById(ID: string | number): number;
	isEdit(): string;
	isSelected(id: string | number): void;
	last(): string | number;
	load(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	locate(ev: Event): void;
	move(sid: string | number, tindex?: number, tobj?: any, tid?: string | number): void;
	moveBottom(id: string | number): void;
	moveDown(id: string | number, step?: number): void;
	moveTop(id: string | number): void;
	moveUp(id: string | number, step?: number): void;
	next(id: string | number): string | number;
	parse(obj: string | { [key: string]: any; }, type: string): void;
	previous(id: string | number): string | number;
	refresh(id?: string | number): void;
	remove(id: string | number): void;
	select(id?: string | number): void;
	selectAll(): void;
	serialize(): any;
	set(id: string | number, hash: any): void;
	show(id: string | number): void;
	sort(key: string, direction: string): void;
	stopEdit(): void;
	unselect(id?: string | number): void;
	unselectAll(): void;
	update(id: string, data: any): void;

	$view: Node;
}
type dhtmlXEditorEventName = 'onAccess' | 'onContentSet' | 'onFocusChanged' | 'onToolbarClick';

declare class dhtmlXEditor {
	constructor(config: IdhtmlXEditorConfig | string | HTMLElement);
	alignCenter(): void;
	alignJustify(): void;
	alignLeft(): void;
	alignRight(): void;
	applyBold(): void;
	applyH1(): void;
	applyH2(): void;
	applyH3(): void;
	applyH4(): void;
	applyItalic(): void;
	applyStrikethrough(): void;
	applySub(): void;
	applySuper(): void;
	applyUnderscore(): void;
	attachEvent(name: dhtmlXEditorEventName, handler: ICallable): number;
	clearFormatting(): void;
	createBulList(): void;
	createNumList(): void;
	decreaseIndent(): void;
	detachEvent(id: number): void;
	getContent(): HTMLElement;
	increaseIndent(): void;
	setContent(html: string): void;
	setContentHTML(url: string): void;

}
type dhtmlXFileUploaderEventName = 'onBeforeClear' | 'onBeforeFileAdd' | 'onBeforeFileRemove' | 'onClear' | 'onFileAdd' | 'onFileRemove' | 'onUploadCancel' | 'onUploadComplete' | 'onUploadFail' | 'onUploadFile';

declare class dhtmlXFileUploader {
	constructor(config?: any);
	clear(): void;
	enableTitleScreen(mode: boolean): void;
	getData(): any;
	getStatus(name: string): number;
	setAutoRemove(mode: boolean): void;
	setAutoStart(mode: boolean): void;
	setSLURL(slUrl: string): void;
	setSWFURL(swfUrl: string): void;
	setTitleText(text: string): void;
	setURL(url: string): void;
	upload(): void;

}
type dhtmlXFormEventName = 'onAfterReset' | 'onAfterSave' | 'onAfterValidate' | 'onBeforeChange' | 'onBeforeClear' | 'onBeforeDataLoad' | 'onBeforeFileAdd' | 'onBeforeFileRemove' | 'onBeforeReset' | 'onBeforeSave' | 'onBeforeValidate' | 'onBlur' | 'onButtonClick' | 'onChange' | 'onClear' | 'onDisable' | 'onEditorAccess' | 'onEditorToolbarClick' | 'onEnable' | 'onEnter' | 'onFileAdd' | 'onFileRemove' | 'onFocus' | 'onInfo' | 'onInputChange' | 'onKeydown' | 'onKeyup' | 'onOptionsLoaded' | 'onUploadCancel' | 'onUploadComplete' | 'onUploadFail' | 'onUploadFile' | 'onValidateError' | 'onValidateSuccess' | 'onXLE' | 'onXLS';

declare class dhtmlXForm {
	constructor(container: string | HTMLElement, config?: IdhtmlXFormConfig[]);
	addItem(pId: string | number, itemData: any, pos: number, insertAfter: number): void;
	adjustParentSize(): void;
	attachEvent(name: dhtmlXFormEventName, handler: ICallable): number;
	checkItem(name: string, value?: string): void;
	clear(): void;
	clearBackup(id: string | number): void;
	clearNote(name: string, value?: string): void;
	clearValidation(name: string, value?: string): void;
	detachEvent(id: number): void;
	disableItem(name: string, value?: string): void;
	enableItem(name: string, value?: string): void;
	enableLiveValidation(state: boolean): void;
	forEachItem(handler: ICallable): void;
	getCalendar(name: string): any;
	getCheckedValue(name: string): string;
	getColorPicker(name: string): any;
	getColumnNode(pId: string | number, index: number): HTMLElement;
	getCombo(name: string): any;
	getContainer(name: string): HTMLElement;
	getEditor(name: string): any;
	getFirstActive(): string;
	getForm(): any;
	getFormData(asString: boolean): any;
	getInput(name: string): any;
	getItemLabel(name: string, value?: string): string;
	getItemText(): void;
	getItemType(name: string, value?: string): string;
	getItemValue(name: string): any;
	getItemWidth(name: string): number;
	getItemsList(): void;
	getOptions(name: string): any;
	getSelect(name: string): any;
	getUploader(name: string): any;
	getUploaderStatus(name: string): number;
	getUserData(name: string, value: string, udKey: string): any;
	hideItem(name: string, value?: string): void;
	isItem(name: string, value?: string): boolean;
	isItemChecked(name: string, value?: string): boolean;
	isItemEnabled(name: string, value?: string): boolean;
	isItemHidden(name: string, value?: string): boolean;
	isLocked(): boolean;
	isReadonly(name: string): boolean;
	load(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	loadStructString(): void;
	lock(): void;
	reloadOptions(name: string, data: string | string[]): void;
	removeColumn(pId: string | number, index: number, removeItems: boolean, moveAfter: boolean): void;
	removeItem(name: string, value?: string): void;
	reset(): void;
	resetDataProcessor(mode: string): void;
	resetValidateCss(name: string): void;
	restoreBackup(id: string | number): void;
	save(): void;
	saveBackup(): void;
	send(url: string, mode: string, callback: ICallable, skipValidation: boolean): void;
	setCalendarDateFormat(name: string, dateFormat: string, serverDateFormat: string): void;
	setFocusOnFirstActive(): void;
	setFontSize(size: string): void;
	setFormData(data: any): void;
	setItemFocus(name: string): void;
	setItemHeight(name: string, height: number): void;
	setItemLabel(name: string, value: string, label: string): void;
	setItemText(): void;
	setItemValue(name: string, value?: any): void;
	setItemWidth(name: string, width: number): void;
	setNote(name: string, value: string, note: any): void;
	setNumberFormat(name: string, format: string, groupSep: string, decSep: string): void;
	setReadonly(name: string, state: boolean): void;
	setRequired(name: string, value: string | number, state: boolean): void;
	setSkin(skin: string): void;
	setTooltip(itemId: string | number, value: string, tooltip: string): void;
	setUserData(name: string, value: string, udKey: string, udValue: any): void;
	setValidateCss(name: string, state: boolean, custom: string): void;
	setValidation(name: string, value: string, rule: string): void;
	showItem(name: string, value?: string): void;
	uncheckItem(name: string, value?: string): void;
	unload(): void;
	unlock(): void;
	updateValues(): void;
	validate(): void;
	validateItem(name: string): void;

}
type dhtmlXGridObjectEventName = 'onAfterCMove' | 'onAfterRowDeleted' | 'onAfterSorting' | 'onBeforeBlockSelected' | 'onBeforeCMove' | 'onBeforeContextMenu' | 'onBeforeDrag' | 'onBeforeFormSubmit' | 'onBeforePageChanged' | 'onBeforeRowDeleted' | 'onBeforeSelect' | 'onBeforeSorting' | 'onBlockRightClick' | 'onBlockSelected' | 'onCalendarShow' | 'onCellChanged' | 'onCellMarked' | 'onCellUnMarked' | 'onCheck' | 'onCheckbox' | 'onClearAll' | 'onCollectValues' | 'onColumnCollapse' | 'onColumnHidden' | 'onDataReady' | 'onDhxCalendarCreated' | 'onDistributedEnd' | 'onDrag' | 'onDragIn' | 'onDragOut' | 'onDrop' | 'onDynXLS' | 'onEditCancel' | 'onEditCell' | 'onEmptyClick' | 'onEnter' | 'onFilterEnd' | 'onFilterStart' | 'onGridReconstructed' | 'onGroup' | 'onGroupClick' | 'onGroupStateChanged' | 'onHeaderClick' | 'onKeyPress' | 'onLastRow' | 'onLiveValidationCorrect' | 'onLiveValidationError' | 'onMouseOver' | 'onPageChanged' | 'onPaging' | 'onResize' | 'onResizeEnd' | 'onRightClick' | 'onRowAdded' | 'onRowCreated' | 'onRowDblClicked' | 'onRowHide' | 'onRowIdChange' | 'onRowInserted' | 'onRowPaste' | 'onRowSelect' | 'onScroll' | 'onSelectStateChanged' | 'onStatReady' | 'onSubAjaxLoad' | 'onSubGridCreated' | 'onSubRowOpen' | 'onSyncApply' | 'onTab' | 'onUndo' | 'onUnGroup' | 'onValidationCorrect' | 'onValidationError' | 'onXLE' | 'onXLS';

declare class dhtmlXGridObject {
	constructor(config: string | HTMLElement);
	addRow(new_id: string | number, text: string | number, ind: string | number): void;
	addRowFromClipboard(): void;
	adjustColumnSize(cInd: number): void;
	attachEvent(evName: dhtmlXGridObjectEventName, evHandler: ICallable): void;
	attachFooter(values: any[], style: any[]): void;
	attachHeader(values: any[], style: any[]): void;
	attachToObject(obj: any): void;
	cellById(row_id: string | number, col_ind: number): void;
	cellByIndex(row_ind: number, col_ind: number): void;
	cellToClipboard(rowId: string | number, cellInd: number): void;
	cells(row_id: string | number, col: number): dhtmlXCell;
	cells2(row_index: number, col: number): dhtmlXCell;
	changePage(pageNum: number): void;
	changePageRelative(ind: number): void;
	changeRowId(oldRowId: string | number, newRowId: string | number): void;
	checkAll(mode: boolean): void;
	clearAll(header: boolean): void;
	clearAndLoad(url: string, call: ICallable, type: string): void;
	clearChangedState(mode: boolean): void;
	clearConfigCookie(name: string): void;
	clearSelection(): void;
	collapseAllGroups(): void;
	collapseColumns(cInd: number): void;
	collapseGroup(val: string): void;
	collectValues(column: number): any[];
	copyBlockToClipboard(): void;
	copyRowContent(from_row: string | number, to_row_id: string | number): void;
	deleteColumn(ind: number): void;
	deleteRow(row_id: string | number): void;
	deleteSelectedRows(): void;
	destructor(): void;
	detachEvent(id: string): void;
	detachFooter(index: number): void;
	detachHeader(index: number): void;
	disableUndoRedo(): void;
	doRedo(): void;
	doUndo(): void;
	doesRowExist(row_id: string | number): void;
	editCell(): void;
	editStop(ode: boolean): void;
	enableAccessKeyMap(): void;
	enableAlterCss(cssE: string, cssU: string, perLevel: boolean, levelUnique: boolean): void;
	enableAutoHeight(mode: boolean, maxHeight: number, countFullHeight: boolean): void;
	enableAutoHiddenColumnsSaving(name: string, cookie_param: string): void;
	enableAutoSaving(name: string, cookie_param: string): void;
	enableAutoSizeSaving(name: string, cookie_param: string): void;
	enableAutoWidth(mode: boolean, max_limit: number, min_limit: number): void;
	enableBlockSelection(mode: boolean): void;
	enableCSVAutoID(mode: boolean): void;
	enableCSVHeader(mode: boolean): void;
	enableCellIds(mode: boolean): void;
	enableColSpan(mode: boolean): void;
	enableColumnAutoSize(mode: boolean): void;
	enableColumnMove(mode: boolean, columns: string): void;
	enableContextMenu(menu: any): void;
	enableDistributedParsing(mode: boolean, count: number, time: number): void;
	enableDragAndDrop(mode: boolean): void;
	enableDragOrder(mode: boolean): void;
	enableEditEvents(click: boolean, dblclick: boolean, f2Key: boolean): void;
	enableEditTabOnly(state: boolean): void;
	enableExcelKeyMap(): void;
	enableHeaderImages(mode: boolean): void;
	enableHeaderMenu(list: string): void;
	enableKeyboardSupport(mode: boolean): void;
	enableLightMouseNavigation(mode: boolean): void;
	enableMarkedCells(mode: boolean): void;
	enableMathEditing(mode: boolean): void;
	enableMathSerialization(mode: boolean): void;
	enableMercyDrag(mode: boolean): void;
	enableMultiline(state: boolean): void;
	enableMultiselect(state: boolean): void;
	enableOrderSaving(name: string, cookie_param: string): void;
	enablePaging(mode: boolean, pageSize: number, pagesInGrp: number, pagingControlsContainer: number | HTMLElement, showRecInfo: boolean, pagingStateContainer: number | HTMLElement): void;
	enablePreRendering(buffer: number): void;
	enableResizing(list: string): void;
	enableRowsHover(mode: boolean, cssClass: string): void;
	enableRowspan(): void;
	enableSmartRendering(mode: boolean, buffer: number): void;
	enableSortingSaving(name: string, cookie_param: string): void;
	enableStableSorting(mode: boolean): void;
	enableTooltips(list: string): void;
	enableUndoRedo(): void;
	enableValidation(mode: boolean): void;
	expandAllGroups(): void;
	expandColumns(cInd: number): void;
	expandGroup(val: string): void;
	filterBy(column: number, value: string, preserve: boolean): void;
	filterByAll(): void;
	findCell(value: string, c_ind: number, first: boolean): void;
	forEachCell(rowId: string | number, custom_code: ICallable): void;
	forEachRow(custom_code: ICallable): void;
	forEachRowInGroup(name: string, custom_code: ICallable): void;
	forceFullLoading(buffer: number): void;
	forceLabelSelection(mode: boolean): void;
	getAllRowIds(separator: string): string;
	getChangedRows(nd_added: boolean): string;
	getCheckedRows(col_ind: number): string;
	getColIndexById(id: number): number;
	getColLabel(cin: number, ind: number): string;
	getColType(cInd: number): string;
	getColTypeById(cID: string | number): string;
	getColWidth(ind: number): number;
	getColumnCombo(column_index: number): any;
	getColumnId(cin: number): string | number;
	getColumnLabel(cin: number, ind: number): string;
	getColumnsNum(): number;
	getCombo(col_ind: number): any;
	getCustomCombo(id: string | number, ind: number): any;
	getFilterElement(index: number): any;
	getFooterLabel(cin: number, ind: number, mode: boolean): string;
	getHeaderMenu(columns: any): any;
	getMarked(): any[];
	getRedo(): any[];
	getRowAttribute(rId: string | number, name: string): any;
	getRowId(ind: number): string | number;
	getRowIndex(row_id: string | number): number;
	getRowsNum(): number;
	getSelectedBlock(): any;
	getSelectedCellIndex(): number;
	getSelectedRowId(): string | number;
	getSortingState(): string;
	getStateOfView(): any[];
	getUndo(): any[];
	getUserData(row_id: string | number, name: string): any;
	gridFromClipboard(): void;
	gridToClipboard(): void;
	gridToGrid(rowId: string | number, sgrid: any, tgrid: any): void;
	gridToTreeElement(treeObj: any, treeNodeId: string | number, gridRowId: string | number): void;
	groupBy(ind: number, mask: any[]): void;
	groupStat(key: string, ind: number, item: string): number;
	init(): void;
	insertColumn(ind: number, header: string, type: string, width: number, sort: string, align: string, valign: string, reserved: any, columnColor: string): void;
	isColumnHidden(ind: number): void;
	load(url: string, call: ICallable, type: string): void;
	loadHiddenColumnsFromCookie(name: string): void;
	loadOpenStates(name: string): void;
	loadOrderFromCookie(name: string): void;
	loadSizeFromCookie(name: string): void;
	loadSortingFromCookie(name: string): void;
	lockRow(rowId: string | number, mode: boolean): void;
	makeFilter(id: number | HTMLElement, column: number, preserve: boolean): void;
	makeSearch(id: string | number | HTMLElement, column: number): void;
	mark(row: string | number, cInd: number, state: boolean): void;
	moveColumn(oldInd: number, newInd: number): void;
	moveRow(rowId: string | number, mode: string, targetId?: string | number, targetGrid?: any): void;
	moveRowDown(row_id: string | number): void;
	moveRowTo(srowId: string | number, trowId: string | number, mode: string, dropmode?: string, sourceGrid?: any, targetGrid?: any): void;
	moveRowUp(row_id: string | number): void;
	parse(data: string | { [key: string]: any; }, type?: string): void;
	pasteBlockFromClipboard(): void;
	post(url: string, post: string, call: ICallable, type: string): void;
	preventIECaching(mode: boolean): void;
	printView(before: string, after: string): void;
	refreshComboColumn(index: number): void;
	refreshFilters(): void;
	refreshMath(): void;
	registerCList(col: number, list: any[]): void;
	rowToClipboard(rowId: string | number): void;
	rowToDragElement(id: string | number): void;
	saveHiddenColumnsToCookie(name: string, cookie_param: string): void;
	saveOpenStates(name: string): void;
	saveOrderToCookie(name: string, cookie_param: string): void;
	saveSizeToCookie(name: string, cookie_param: string): void;
	saveSortingToCookie(name: string, cookie_param: string): void;
	selectAll(): void;
	selectBlock(start_row: string | number, start_col: number, end_row: string | number, end_column: number): void;
	selectCell(row: number | HTMLElement, cInd: number, preserve: boolean, edit: boolean, show: boolean): void;
	selectRow(row: number | HTMLElement, fl: boolean, preserve: boolean, show: boolean): void;
	selectRowById(row_id: string | number, preserve: boolean, show: boolean, call: boolean): void;
	serialize(): void;
	serializeToCSV(text_only: boolean): void;
	setActive(mode: boolean): void;
	setAwaitedRowHeight(height: number): void;
	setCSVDelimiter(str: string): void;
	setCellExcellType(rowId: string | number, cellIndex: number, type: string): void;
	setCellTextStyle(row_id: string | number, ind: number, styleString: string): void;
	setCheckedRows(col_ind: number, v: number): void;
	setColAlign(alStr: string): void;
	setColLabel(col: number, ind: number): void;
	setColSorting(sortStr: string): void;
	setColTypes(typeStr: string): void;
	setColVAlign(valStr: string): void;
	setColValidators(vals: string): void;
	setColWidth(ind: number, value: string): void;
	setColspan(row_id: string | number, col_index: number, colspan: number): void;
	setColumnColor(clr: string): void;
	setColumnExcellType(colIndex: number, type: string): void;
	setColumnHidden(ind: number, state: boolean): void;
	setColumnId(ind: number, id: string | number): void;
	setColumnIds(ids: string): void;
	setColumnLabel(col: number, ind: number): void;
	setColumnMinWidth(width: number, ind: number): void;
	setColumnsVisibility(list: string): void;
	setCustomSorting(func: ICallable, col: number): void;
	setDateFormat(mask: string, server_mask: string): void;
	setDelimiter(delim: string): void;
	setDragBehavior(mode: string): void;
	setEditable(mode: boolean): void;
	setExternalTabOrder(start: string | number | HTMLElement, end: string | number | HTMLElement): void;
	setFieldName(name: string): void;
	setFooterLabel(col: number, label: string, ind: number): void;
	setHeader(hdrStr: string, splitSign: string, styles: any[]): void;
	setIconsPath(path: string): void;
	setIconset(name: string): void;
	setImagesPath(path: string): void;
	setInitWidths(wp: string): void;
	setInitWidthsP(wp: string): void;
	setMathRound(digits: number): void;
	setNoHeader(fl: boolean): void;
	setNumberFormat(mask: string, cInd: number, p_sep: string, d_sep: string): void;
	setPagingSkin(name: string): void;
	setPagingTemplates(navigation_template: string, info_template: string): void;
	setPagingWTMode(navButtons: boolean, navLabel: boolean, pageSelect: boolean, perPageSelect: boolean | any[]): void;
	setRowAttribute(id: string | number, name: string, value: any): void;
	setRowColor(row_id: string | number, color: string): void;
	setRowExcellType(rowId: string | number, type: string): void;
	setRowHidden(id: string | number, state: boolean): void;
	setRowId(ind: number, row_id: string | number): void;
	setRowTextBold(row_id: string | number): void;
	setRowTextNormal(row_id: string | number): void;
	setRowTextStyle(row_id: string | number, styleString: string): void;
	setRowspan(rowID: string | number, colInd: number, length: number): void;
	setSerializableColumns(list: string): void;
	setSerializationLevel(userData: boolean, selectedAttr: boolean, config: boolean, changedAttr: boolean, onlyChanged: boolean, asCDATA: boolean): void;
	setSizes(): void;
	setSkin(name: string): void;
	setSortImgState(state: boolean, ind: number, order: string, row: number): void;
	setStyle(ss_header: string, ss_grid: string, ss_selCell: string, ss_selRow: string): void;
	setSubGrid(subgrid: any, sInd: number, tInd: number): void;
	setSubTree(subgrid: any, sInd: number): void;
	setTabOrder(order: string): void;
	setUserData(row_id: string | number, name: string, value: any): void;
	setXMLAutoLoading(url: string, buffer: number): void;
	showRow(rowID: number | string): void;
	sortRows(col: number, type: string, order: string): void;
	splitAt(ind: number): void;
	startFastOperations(): void;
	stopFastOperations(): void;
	submitAddedRows(mode: boolean): void;
	submitColumns(inds: string): void;
	submitOnlyChanged(mode: boolean): void;
	submitOnlyRowID(mode: boolean): void;
	submitOnlySelected(mode: boolean): void;
	submitSerialization(mode: boolean): void;
	toExcel(path: string): void;
	toPDF(path: string): void;
	treeToGridElement(treeObj: any, treeNodeId: string | number, gridRowId: string | number): void;
	uid(): void;
	unGroup(): void;
	uncheckAll(): void;
	unmarkAll(): void;
	updateCellFromClipboard(rowId?: string | number, cellInd?: number): void;
	updateFromXML(url: string, insert_new: boolean, del_missed: boolean, afterCall: ICallable): void;
	updateGroups(): void;
	updateRowFromClipboard(rowId?: string | number): void;
	validateCell(id: string | number, index: number, rule: ICallable): void;

	csvParser: any;
	editor: any;
}
type dhtmlXLayoutObjectEventName = 'onCollapse' | 'onContentLoaded' | 'onDblClick' | 'onDock' | 'onExpand' | 'onPanelResizeFinish' | 'onResize' | 'onResizeFinish' | 'onUndock';

declare class dhtmlXLayoutObject {
	constructor(config: IdhtmlXLayoutConfig);
	constructor(node: string | HTMLElement, pattern: string, skin?: string);
	attachEvent(name: dhtmlXLayoutObjectEventName, handler: ICallable): number;
	attachFooter(id: string | number | HTMLElement, height?: number): void;
	attachHeader(id: string | number | HTMLElement, height?: number): void;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachStatusBar(conf?: any): any;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	cells(id: string): dhtmlXLayoutCell;
	detachEvent(id: number): void;
	detachFooter(): void;
	detachHeader(): void;
	detachMenu(): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	dockWindow(): void;
	forEachItem(handler: ICallable): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getEffect(): void;
	getIdByIndex(): void;
	getIndexById(): void;
	hideMenu(): void;
	hidePanel(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	isPanelVisible(): void;
	listAutoSizes(): void;
	listPatterns(): void;
	listViews(): void;
	progressOff(): void;
	progressOn(): void;
	setAutoSize(hor: string, ver: string): void;
	setCollapsedText(): void;
	setEffect(): void;
	setImagePath(): void;
	setOffsets(conf: any): void;
	setSeparatorSize(index: number, size: number): void;
	setSizes(): void;
	setSkin(skin: string): void;
	showMenu(): void;
	showPanel(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	unDockWindow(): void;
	unload(): void;

	dhxWins: dhtmlXWindows;
	items: any[];
}

declare class dhtmlXLayoutCell extends dhtmlXCell {
	constructor(config?: any);
	appendObject(obj: string | number | HTMLElement): void;
	attachAccordion(conf: any): dhtmlXAccordion;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachChart(conf: any): dhtmlXChart;
	attachDataView(conf: any): dhtmlXDataView;
	attachEditor(): dhtmlXEditor;
	attachForm(conf: any): dhtmlXForm;
	attachGrid(): dhtmlXGridObject;
	attachHTMLString(htmlString: string): void;
	attachLayout(conf: any): dhtmlXLayoutObject;
	attachList(conf: any): dhtmlXList;
	attachMap(opts?: any): any;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachObject(obj: any): void;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachScheduler(day?: Date, mode?: string, contId?: string, scheduler?: dhtmlXScheduler): dhtmlXScheduler;
	attachSidebar(conf?: any): dhtmlXSideBar;
	attachStatusBar(conf?: any): { [key: string]: any; };
	attachTabbar(conf?: any): dhtmlXTabBar;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	attachTree(rootId?: any): dhtmlXTreeObject;
	attachTreeView(conf?: any): dhtmlXTreeViewObject;
	attachURL(url: string, ajax?: boolean, postData?: any): void;
	attachVault(conf: any): dhtmlXVaultObject;
	collapse(): void;
	detachMenu(): void;
	detachObject(remove?: boolean, moveTo?: string | number | HTMLElement): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	dock(): void;
	expand(): void;
	fixSize(width?: boolean, height?: boolean): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getCollapsedText(): void;
	getFrame(): HTMLElement;
	getHeight(): number;
	getId(): string | number;
	getIndex(): number;
	getText(): string;
	getViewName(): string;
	getWidth(): number;
	hideArrow(): void;
	hideHeader(): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	isArrowVisible(): boolean;
	isCollapsed(): boolean;
	isHeaderVisible(): boolean;
	progressOff(): void;
	progressOn(): void;
	reloadURL(): void;
	setCollapsedText(text: string): void;
	setHeight(height: number): void;
	setMinHeight(min_height: number): void;
	setMinWidth(min_width: number): void;
	setText(text: string): void;
	setWidth(width: number): void;
	showArrow(): void;
	showHeader(): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	showView(name: string): boolean;
	undock(x: number, y: number, width: number, height: number): void;
	unloadView(name: string): void;

}
type dhtmlXListEventName = 'onAfterAdd' | 'onAfterDelete' | 'onAfterDrop' | 'onAfterEditStart' | 'onAfterEditStop' | 'onAfterRender' | 'onAfterSelect' | 'onBeforeAdd' | 'onBeforeContextMenu' | 'onBeforeDelete' | 'onBeforeDrag' | 'onBeforeDragIn' | 'onBeforeDrop' | 'onBeforeEditStart' | 'onBeforeEditStop' | 'onBeforeRender' | 'onBeforeSelect' | 'onDataRequest' | 'onDragOut' | 'onEditKeyPress' | 'onItemClick' | 'onItemDblClick' | 'onItemRender' | 'onMouseMove' | 'onMouseMoving' | 'onMouseOut' | 'onSelectChange' | 'onXLE' | 'onXLS';

declare class dhtmlXList {
	constructor(config: IdhtmlXListConfig | string | HTMLElement);
	add(obj: any, index: number): void;
	attachEvent(name: dhtmlXListEventName, handler: ICallable): number;
	changeId(oldId: string, newId: string): void;
	clearAll(): void;
	copy(sid: string | number, tindex?: number, tobj?: any, tid?: string | number): void;
	customize(properties: any): void;
	dataCount(): number;
	define(mode: string, value: boolean): void;
	destructor(): void;
	detachEvent(id: number): void;
	edit(id: string | number): void;
	exists(id: string | number): boolean;
	filter(key: string | ICallable, value: string): void;
	first(): string | number;
	get(id: string | number): any;
	getSelected(as_array: boolean): string | number;
	idByIndex(index: number): string | number;
	indexById(ID: string | number): number;
	isEdit(): string;
	isSelected(id: string | number): void;
	last(): string | number;
	load(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	locate(ev: Event): void;
	move(sid: string | number, tindex?: number, tobj?: any, tid?: string | number): void;
	moveBottom(id: string | number): void;
	moveDown(id: string | number, step?: number): void;
	moveTop(id: string | number): void;
	moveUp(id: string | number, step?: number): void;
	next(id: string | number): string | number;
	parse(obj: string | { [key: string]: any; }, type: string): void;
	previous(id: string | number): string | number;
	refresh(id?: string | number): void;
	remove(id: string | number): void;
	select(id?: string | number): void;
	selectAll(): void;
	serialize(): any;
	set(id: string | number, hash: any): void;
	show(id: string | number): void;
	sort(key: string, direction: string): void;
	stopEdit(): void;
	unselect(id?: string | number): void;
	unselectAll(): void;
	update(id: string, data: any): void;

	$view: Node;
}
type dhtmlXMenuObjectEventName = 'onAfterContextMenu' | 'onBeforeContextMenu' | 'onCheckboxClick' | 'onClick' | 'onContextMenu' | 'onHide' | 'onRadioClick' | 'onShow' | 'onTouch' | 'onXLE' | 'onXLS';

declare class dhtmlXMenuObject {
	constructor(config?: IdhtmlXMenuConfig | string | HTMLElement);
	addCheckbox(mode: string, nextToId: any, pos: number, itemId: string | number, text: string, state: boolean, dis: boolean): void;
	addContextZone(zoneId: string): void;
	addNewChild(parId: any, pos: number, itemId: string | number, text: string, dis: boolean, imgEn: string, imgDis: string): void;
	addNewSeparator(nextToId: string | number, itemId: string | number): void;
	addNewSibling(nextToId: string | number, itemId: string | number, text: string, dis: boolean, imgEn: string, imgDis: string): void;
	addRadioButton(mode: string, nextToId: string | number, pos: number, itemId: string | number, text: string, group: string | number, state: boolean, dis: boolean): void;
	attachEvent(name: dhtmlXMenuObjectEventName, handler: ICallable): number;
	clearAll(): void;
	clearHref(itemId: string | number): void;
	clearItemImage(itemId: string | number): void;
	detachEvent(id: number): void;
	enableDynamicLoading(url: string, icon: boolean): void;
	enableEffect(name: string, maxOpacity: number, effectSpeed: number): void;
	forEachItem(handler: ICallable): void;
	getCheckboxState(id: string | number): boolean;
	getCircuit(id: string | number): any[];
	getContextMenuHideAllMode(): boolean;
	getHotKey(itemId: string | number): string;
	getItemImage(itemId: string | number): any[];
	getItemPosition(itemId: string | number): number;
	getItemText(itemId: string | number): string;
	getItemType(itemId: string): string;
	getParentId(itemId: string | number): string | number;
	getRadioChecked(group: string): string | number;
	getTooltip(itemId: string | number): string;
	getUserData(itemId: string | number, name: string): any;
	hide(): void;
	hideContextMenu(): void;
	hideItem(id: string | number): void;
	isContextZone(zoneId: string): boolean;
	isItemEnabled(itemId: string | number): boolean;
	isItemHidden(itemId: string | number): boolean;
	loadFromHTML(object: HTMLElement, clearAfterAdd: boolean, onLoadFunction: ICallable): void;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	loadXML(): void;
	loadXMLString(): void;
	removeContextZone(zoneId: string): void;
	removeItem(id: string | number): void;
	renderAsContextMenu(): void;
	serialize(): any;
	setAlign(align: string): void;
	setAutoHideMode(mode: boolean): void;
	setAutoShowMode(mode: boolean): void;
	setCheckboxState(itemId: string | number, state: boolean): void;
	setContextMenuHideAllMode(mode: boolean): void;
	setHotKey(itemId: string | number, hkey: string): void;
	setHref(itemId: string | number, href: string, target: string): void;
	setIconPath(): void;
	setIconsPath(path: string): void;
	setIconset(name: string): void;
	setImagePath(): void;
	setItemDisabled(itemId: string | number): void;
	setItemEnabled(itemId: string | number): void;
	setItemImage(itemId: string | number, img: string, imgDis: string): void;
	setItemPosition(itemId: string | number, pos: number): void;
	setItemText(itemId: string | number, text: string): void;
	setOpenMode(mode: string): void;
	setOverflowHeight(itemsNum: number): void;
	setRadioChecked(group: string, itemId: string | number): void;
	setSkin(skin: string): void;
	setTooltip(itemId: string | number, tip: string): void;
	setTopText(text: string): void;
	setUserData(itemId: string | number, name: string, value: string): void;
	setVisibleArea(x1: number, x2: number, y1: number, y2: number): void;
	setWebModeTimeout(tm: number): void;
	showContextMenu(x: number, y: number): void;
	showItem(itemId: string | number): void;
	unload(): void;

}
type dhtmlXPopupEventName = 'onBeforeHide' | 'onClick' | 'onContentClick' | 'onHide' | 'onShow';

declare class dhtmlXPopup {
	constructor(config: IdhtmlXPopupConfig);
	attachAccordion(width: number, height: number, conf: any): dhtmlXAccordion;
	attachCalendar(): dhtmlXCalendarObject;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachColorPicker(conf: any): dhtmlXColorPicker;
	attachEditor(width: number, height: number): dhtmlXEditor;
	attachEvent(name: dhtmlXPopupEventName, handler: ICallable): number;
	attachForm(formData: any): dhtmlXForm;
	attachGrid(width: number, height: number): dhtmlXGridObject;
	attachHTML(html: string): void;
	attachLayout(width: number, height: number, pattern: string): dhtmlXLayoutObject;
	attachList(template: string, data: any[]): void;
	attachObject(obj: string | HTMLElement): void;
	attachSidebar(conf?: any): any;
	attachTabbar(width: number, height: number, conf: any): dhtmlXTabBar;
	attachTree(width: number, height: number, rootId: string | number): dhtmlXTreeObject;
	attachTreeView(width: number, height: number, conf: any): dhtmlXTreeViewObject;
	attachVault(width: number, height: number, conf: any): dhtmlXVaultObject;
	clear(): void;
	detachEvent(id: number): void;
	getItemData(id?: string | number): any[];
	hide(): void;
	isVisible(): boolean;
	setDimension(width: number, height: number): void;
	setSkin(skin: string): void;
	show(id: string | number): void;
	unload(): void;

	separator: any;
}
type dhtmlXRibbonEventName = 'onCheck' | 'onClick' | 'onEnter' | 'onSelect' | 'onSelectOption' | 'onStateChange' | 'onTabClick' | 'onTabClose' | 'onValueChange' | 'onXLE' | 'onXLS';

declare class dhtmlXRibbon {
	constructor(config: IdhtmlXRibbonConfig);
	constructor(container: string | HTMLElement, config: IdhtmlXRibbonConfig);
	attachEvent(name: dhtmlXRibbonEventName, handler: ICallable): number;
	check(id: string | number): void;
	detachEvent(id: number): void;
	disable(itemId: string): void;
	enable(itemId: string): void;
	getCombo(id: string | number): any;
	getInput(id: string | number): any;
	getItemOptionText(id: string | number, optId: string | number): string;
	getItemState(itemId: string | number, segmId: string | number): boolean;
	getItemText(itemId: string | number): string;
	getItemType(itemId: string): string;
	getValue(itemId: string): any;
	hide(itemId: string): void;
	isChecked(id: string | number): boolean;
	isEnabled(itemId: string): boolean;
	isVisible(itemId: string): boolean;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	removeItem(itemId: string): void;
	setIconPath(path: string): void;
	setIconset(name: string): void;
	setItemImage(id: string | number, img: string): void;
	setItemImageDis(id: string | number, imgdis: string): void;
	setItemOptionText(item: string | number, optId: string | number, text: string): void;
	setItemState(itemId: string, state: boolean): void;
	setItemText(itemId: string | number, text: string): void;
	setSizes(): void;
	setSkin(skin: string): void;
	setValue(id: string, value: number, callEvent: boolean): void;
	show(itemId: string): void;
	tabs(id: string | number): dhtmlXTabBarCell;
	uncheck(id: string | number): void;
	unload(): void;

}
type dhtmlXSideBarEventName = 'onBeforeSelect' | 'onBubbleClick' | 'onContentLoaded' | 'onSelect' | 'onXLE' | 'onXLS';

declare class dhtmlXSideBar {
	constructor(config: IdhtmlXSideBarConfig | string | HTMLElement);
	addItem(itemConf: any[] | { [key: string]: any; }): void;
	attachEvent(name: dhtmlXSideBarEventName, handler: ICallable): number;
	attachFooter(id: string | number | HTMLElement, height?: number): void;
	attachHeader(id: string | number | HTMLElement, height?: number): void;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachStatusBar(conf?: any): any;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	cells(id: string | number): dhtmlXSideBarCell;
	clearAll(): void;
	detachEvent(id: number): void;
	detachFooter(): void;
	detachHeader(): void;
	detachMenu(): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	forEachCell(handler: ICallable): void;
	forEachItem(handler: ICallable): void;
	getActiveItem(): string | number;
	getAllItems(): any[];
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getNumberOfItems(): number;
	goToNextItem(callEvent: boolean): void;
	goToPrevItem(callEvent: boolean): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideSide(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	items(id: string | number): dhtmlXSideBarCell;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	progressOff(): void;
	progressOn(): void;
	removeSep(id: string | number): void;
	setOffsets(conf: any): void;
	setSideWidth(width: number): void;
	setSizes(): void;
	setTemplate(template: string, iconsPath: string): void;
	showMenu(): void;
	showRibbon(): void;
	showSide(): void;
	showStatusBar(): void;
	showToolbar(): void;
	unload(): void;

	templates: any;
}

declare class dhtmlXSideBarCell extends dhtmlXCell {
	constructor(config?: any);
	appendObject(obj: string | number | HTMLElement): void;
	attachAccordion(conf: any): dhtmlXAccordion;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachChart(conf: any): dhtmlXChart;
	attachDataView(conf: any): dhtmlXDataView;
	attachEditor(): dhtmlXEditor;
	attachForm(conf: any): dhtmlXForm;
	attachGrid(): dhtmlXGridObject;
	attachHTMLString(htmlString: string): void;
	attachLayout(conf: any): dhtmlXLayoutObject;
	attachList(conf: any): dhtmlXList;
	attachMap(opts?: any): any;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachObject(obj: any): void;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachScheduler(day?: Date, mode?: string, contId?: string, scheduler?: dhtmlXScheduler): dhtmlXScheduler;
	attachSidebar(conf?: any): dhtmlXSideBar;
	attachStatusBar(conf?: any): { [key: string]: any; };
	attachTabbar(conf?: any): dhtmlXTabBar;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	attachTree(rootId?: any): dhtmlXTreeObject;
	attachTreeView(conf?: any): dhtmlXTreeViewObject;
	attachURL(url: string, ajax?: boolean, postData?: any): void;
	attachVault(conf: any): dhtmlXVaultObject;
	clearBubble(): void;
	detachEvent(id: number): void;
	detachMenu(): void;
	detachObject(remove?: boolean, moveTo?: string | number | HTMLElement): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getBubble(): string | number;
	getFrame(): HTMLElement;
	getHeaderText(): string;
	getId(): string | number;
	getText(): string;
	getViewName(): string;
	hide(actvId?: string | boolean): void;
	hideHeader(): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	isActive(): boolean;
	isHeaderVisible(): boolean;
	isVisible(): boolean;
	progressOff(): void;
	progressOn(): void;
	reloadURL(): void;
	remove(actvId: string | number | boolean): void;
	setActive(): void;
	setBubble(content: string | number): void;
	setHeaderText(headerText: string): void;
	setText(text: any): void;
	show(mode: boolean): void;
	showHeader(): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	showView(name: string): boolean;
	unloadView(name: string): void;

}
type dhtmlXSliderEventName = 'onChange' | 'onMouseDown' | 'onMouseUp' | 'onSlideEnd';

declare class dhtmlXSlider {
	constructor(config: IdhtmlxSliderConfig);
	constructor(parent: string | HTMLElement, size?: number, skin?: string, vertical?: number, min?: number, max?: number, value?: number, step?: number);
	attachEvent(name: dhtmlXSliderEventName, handler: ICallable): number;
	detachEvent(id: number): void;
	disable(): void;
	disableTooltip(): void;
	enable(): void;
	enableTooltip(): void;
	getMax(): number;
	getMin(): number;
	getRunnerIndex(): number;
	getStep(): number;
	getValue(): number | any[];
	hide(): void;
	init(): void;
	isEnabled(): boolean;
	isVisible(): boolean;
	linkTo(obj: string | number | HTMLElement): void;
	setImagePath(): void;
	setMax(val: number): void;
	setMin(val: number): void;
	setOnChangeHandler(): void;
	setSize(value: number): void;
	setSkin(skin: string): void;
	setStep(val: number): void;
	setValue(value: number | any[], callEvent: boolean): void;
	show(): void;
	unload(): void;

}
type dhtmlXTabBarEventName = 'onContentLoaded' | 'onSelect' | 'onTabClick' | 'onTabClose' | 'onTabContentLoaded' | 'onXLE' | 'onXLS';

declare class dhtmlXTabBar {
	constructor(config: IdhtmlXTabBarConfig | string | HTMLElement);
	addTab(id: string | number, text: string, width: number, position: number, active: boolean, close: boolean): void;
	adjustOuterSize(): void;
	attachEvent(name: dhtmlXTabBarEventName, handler: ICallable): number;
	attachFooter(id: string | number | HTMLElement, height?: number): void;
	attachHeader(id: string | number | HTMLElement, height?: number): void;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachStatusBar(conf?: any): any;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	cells(id: string | number): dhtmlXTabBarCell;
	clearAll(): void;
	destructor(): void;
	detachEvent(id: number): void;
	detachFooter(): void;
	detachHeader(): void;
	detachMenu(): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	disableTab(): void;
	enableAutoReSize(): void;
	enableAutoSize(): void;
	enableContentZone(mode: boolean): void;
	enableForceHiding(): void;
	enableScroll(): void;
	enableTab(): void;
	enableTabCloseButton(mode: boolean): void;
	forEachCell(handler: ICallable): void;
	forEachTab(handler: ICallable): void;
	forceLoad(id: string | number): void;
	getActiveTab(): string | number;
	getAllTabs(): any[];
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getIndex(): number;
	getLabel(): string;
	getNumberOfTabs(): number;
	goToNextTab(): void;
	goToPrevTab(): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideTab(): void;
	hideToolbar(): void;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	loadXML(xmlUrl: string, doOnLoad: ICallable): void;
	loadXMLString(xmlString: string, doOnLoad: ICallable): void;
	moveTab(id: string | number, index: number): void;
	normalize(): void;
	progressOff(): void;
	progressOn(): void;
	removeTab(): void;
	setAlign(align: string): void;
	setArrowsMode(mode: string): void;
	setContent(id: string | number, obj: string | number | HTMLElement): void;
	setContentHTML(id: string | number, htmlString: string): void;
	setContentHref(id: string | number, href: string): void;
	setCustomStyle(): void;
	setHrefMode(mode: string): void;
	setImagePath(): void;
	setLabel(): void;
	setMargin(): void;
	setOffset(): void;
	setOffsets(conf: any): void;
	setSize(): void;
	setSizes(): void;
	setSkin(skin: string): void;
	setSkinColors(): void;
	setStyle(): void;
	setTabActive(): void;
	setTabInActive(): void;
	setTabsMode(mode: string): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showTab(): void;
	showToolbar(): void;
	tabWindow(): void;
	tabs(id: string | number): dhtmlXTabBarCell;
	unload(): void;

}

declare class dhtmlXTabBarCell extends dhtmlXCell {
	constructor(config?: any);
	appendObject(obj: string | number | HTMLElement): void;
	attachAccordion(conf: any): dhtmlXAccordion;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachChart(conf: any): dhtmlXChart;
	attachDataView(conf: any): dhtmlXDataView;
	attachEditor(): dhtmlXEditor;
	attachForm(conf: any): dhtmlXForm;
	attachGrid(): dhtmlXGridObject;
	attachHTMLString(htmlString: string): void;
	attachLayout(conf: any): dhtmlXLayoutObject;
	attachList(conf: any): dhtmlXList;
	attachMap(opts?: any): any;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachObject(obj: any): void;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachScheduler(day?: Date, mode?: string, contId?: string, scheduler?: dhtmlXScheduler): dhtmlXScheduler;
	attachSidebar(conf?: any): dhtmlXSideBar;
	attachStatusBar(conf?: any): { [key: string]: any; };
	attachTabbar(conf?: any): dhtmlXTabBar;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	attachTree(rootId?: any): dhtmlXTreeObject;
	attachTreeView(conf?: any): dhtmlXTreeViewObject;
	attachURL(url: string, ajax?: boolean, postData?: any): void;
	attachVault(conf: any): dhtmlXVaultObject;
	close(actvId?: string | number | boolean): void;
	detachMenu(): void;
	detachObject(remove?: boolean, moveTo?: string | number | HTMLElement): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	disable(activateId: string | boolean): void;
	enable(mode: boolean): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getFrame(): HTMLElement;
	getId(): string | number;
	getIndex(): number;
	getText(): string;
	getViewName(): string;
	hide(actvId?: string | number | boolean): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	isActive(): boolean;
	isEnabled(): boolean;
	isVisible(): boolean;
	progressOff(): void;
	progressOn(): void;
	reloadURL(): void;
	setActive(): void;
	setText(text: string): void;
	show(mode: boolean): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	showView(name: string): boolean;
	unloadView(name: string): void;

}
type dhtmlXToolbarObjectEventName = 'onBeforeStateChange' | 'onButtonSelectHide' | 'onButtonSelectShow' | 'onClick' | 'onEnter' | 'onStateChange' | 'onValueChange' | 'onXLE' | 'onXLS';

declare class dhtmlXToolbarObject {
	constructor(config: IdhtmlXToolbarConfig | string | HTMLElement, skin?: string, icon_path?: string, xml?: string);
	addButton(id: string | number, pos: number, text: string, imgEn: string, imgDis: string): void;
	addButtonSelect(id: string, pos: number, text: string, opts: any[], imgEn: string, imgDis: string, renderSelect: boolean, openAll: boolean, maxOpen: number, mode: string): void;
	addButtonTwoState(id: string | number, pos: number, text: string, imgEn: string, imgDis: string): void;
	addInput(id: string | number, pos: number, value: string, width: number): void;
	addListOption(parentId: string | number, optionId: string | number, pos: number, type: string, text: string, img: string): void;
	addSeparator(id: string | number, pos: number): void;
	addSlider(id: string | number, pos: number, len: number, valueMin: number, valueMax: number, valueNow: number, textMin: string, textMax: string, tip: string): void;
	addSpacer(itemId: string | number): void;
	addText(id: string | number, pos: number, text: string): void;
	attachEvent(name: dhtmlXToolbarObjectEventName, handler: ICallable): number;
	clearAll(): void;
	clearItemImage(itemId: string | number): void;
	clearItemImageDis(itemId: string | number): void;
	clearListOptionImage(parentId: string | number, optionId: string | number): void;
	detachEvent(id: number): void;
	disableItem(itemId: string | number): void;
	disableListOption(parentId: string | number, optionId: string | number): void;
	enableItem(itemId: string | number): void;
	enableListOption(parentId: string | number, optionId: string | number): void;
	forEachItem(handler: ICallable): void;
	forEachListOption(parentId: string | number, handler: ICallable): void;
	getAllListOptions(parentId: string | number): any;
	getInput(id: string | number): any;
	getItemState(itemId: string | number): boolean;
	getItemText(itemId: string | number): string;
	getItemToolTip(itemId: string | number): string;
	getItemToolTipTemplate(itemId: string | number): string;
	getListOptionImage(parentId: string | number, optionId: string | number): string;
	getListOptionPosition(parentId: string | number, optionId: string | number): number;
	getListOptionSelected(parentId: string | number): string | number;
	getListOptionText(parentId: string | number, optionId: string | number): string;
	getListOptionToolTip(parentId: string | number, optionId: string | number): string;
	getListOptionUserData(parentId: string | number, optionId: string | number, name: string): any;
	getMaxValue(itemId: string | number): any;
	getMinValue(itemId: string | number): any;
	getParentId(optionId: string | number): string | number;
	getPosition(itemId: string | number): number;
	getType(itemId: string): string;
	getTypeExt(itemId: string | number): any;
	getUserData(itemId: string | number, name: string): any;
	getValue(itemId: string | number): any;
	getWidth(itemId: string | number): number;
	hideItem(itemId: string | number): void;
	hideListOption(parentId: string | number, optionId: string | number): void;
	isEnabled(itemId: string | number): boolean;
	isListOptionEnabled(parentId: string | number, optionId: string | number): boolean;
	isListOptionVisible(parentId: string | number, optionId: string | number): boolean;
	isVisible(itemId: string | number): boolean;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	loadXML(): void;
	loadXMLString(): void;
	removeItem(itemId: string | number): void;
	removeListOption(parentId: string | number, optionId: string | number): void;
	removeSpacer(itemId: string | number): void;
	setAlign(mode: string): void;
	setIconPath(): void;
	setIconSize(size: number): void;
	setIconsPath(path: string): void;
	setIconset(name: string): void;
	setItemImage(itemId: string | number, url: string): void;
	setItemImageDis(itemId: string | number, url: string): void;
	setItemState(itemId: string | number, state: boolean): void;
	setItemText(itemId: string | number, text: string): void;
	setItemToolTip(itemId: string | number, tip: string): void;
	setItemToolTipTemplate(itemId: string | number, template: string): void;
	setListOptionImage(parentId: string | number, optionId: string | number, img: string): void;
	setListOptionPosition(parentId: string | number, optionId: string | number, pos: number): void;
	setListOptionSelected(parentId: string | number, optionId: string | number): void;
	setListOptionText(parentId: string | number, optionId: string | number, text: string): void;
	setListOptionToolTip(parentId: string | number, optionId: string | number, tip: string): void;
	setListOptionUserData(parentId: string | number, optionId: string | number, name: string, value: any): void;
	setMaxOpen(itemId: string | number, max: number): void;
	setMaxValue(itemId: string | number, value: number, label: string): void;
	setMinValue(itemId: string | number, value: number, label: string): void;
	setPosition(itemId: string | number, pos: number): void;
	setSkin(name: string): void;
	setUserData(itemId: string | number, name: string, value: any): void;
	setValue(itemId: string | number, value: number, CallEvent: boolean): void;
	setWidth(itemId: string | number, width: number): void;
	showItem(itemId: string | number): void;
	showListOption(parentId: string | number, optionId: string | number): void;
	unload(): void;

}
type dhtmlXTreeObjectEventName = 'onAllOpenDynamic' | 'onBeforeCheck' | 'onBeforeContextMenu' | 'onBeforeDrag' | 'onCheck' | 'onClick' | 'onDblClick' | 'onDrag' | 'onDragIn' | 'onDrop' | 'onEdit' | 'onEditCancel' | 'onKeyPress' | 'onMouseIn' | 'onMouseOut' | 'onOpenDynamicEnd' | 'onOpenEnd' | 'onOpenStart' | 'onRightClick' | 'onSelect' | 'onXLE' | 'onXLS';

declare class dhtmlXTreeObject {
	constructor(parent: string | HTMLElement, width: string, height: string, level: number);
	assignKeys(keys: any[]): void;
	attachEvent(name: dhtmlXTreeObjectEventName, handler: ICallable): number;
	changeItemId(oldId: string | number, newId: string | number): void;
	clearCut(): void;
	clearSelection(id?: string | number): void;
	closeAllItems(id: string | number): void;
	closeItem(id: string | number): void;
	deleteChildItems(id: string | number): void;
	deleteItem(id: string | number, selectParent: boolean): void;
	destructor(): void;
	detachEvent(id: number): void;
	disableCheckbox(id: string | number, state: boolean): void;
	doCut(): void;
	doPaste(id: string | number): void;
	editItem(id: string | number): void;
	enableActiveImages(mode: boolean): void;
	enableAutoSavingSelected(mode: boolean): void;
	enableAutoTooltips(mode: boolean): void;
	enableCheckBoxes(mode: boolean, hidden: boolean): void;
	enableContextMenu(menu: dhtmlXMenuObject): void;
	enableDistributedParsing(mode: boolean, count: number, delay: number): void;
	enableDragAndDrop(mode: string | boolean, rmode: boolean): void;
	enableDragAndDropScrolling(mode: boolean): void;
	enableHighlighting(mode: boolean): void;
	enableIEImageFix(mode: boolean): void;
	enableImageDrag(mode: boolean): void;
	enableItemEditor(mode: boolean): void;
	enableKeySearch(mode: boolean): void;
	enableKeyboardNavigation(mode: boolean): void;
	enableLoadingItem(text: string): void;
	enableMercyDrag(mode: boolean): void;
	enableMultiLineItems(width: number): void;
	enableMultiselection(mode: boolean, strict: boolean): void;
	enableRTL(mode: boolean): void;
	enableRadioButtons(mode: boolean, id: string | number): void;
	enableSingleRadioMode(mode: boolean, id: string | number): void;
	enableSmartCheckboxes(mode: boolean): void;
	enableSmartRendering(): void;
	enableSmartXMLParsing(mode: boolean): void;
	enableTextSigns(mode: boolean): void;
	enableThreeStateCheckboxes(mode: boolean): void;
	enableTreeImages(mode: boolean): void;
	enableTreeLines(mode: boolean): void;
	findItem(searchStr: string, direction: number, top: number): void;
	findItemIdByLabel(searchStr: string, direction: number, top: number): void;
	getAllChecked(): any[];
	getAllCheckedBranches(): any[];
	getAllChildless(): any[];
	getAllItemsWithKids(): any[];
	getAllPartiallyChecked(): any[];
	getAllSubItems(id: string | number): any[];
	getAllUnchecked(): any[];
	getAttribute(id: string | number, name: string): any;
	getChildItemIdByIndex(id: string | number, index: number): string | number;
	getDistributedParsingState(): boolean;
	getIndexById(id: string | number): number;
	getItemColor(id: string | number): string;
	getItemIdByIndex(id: string | number, index: number): string | number;
	getItemImage(id: string | number, imageInd: number, value: number): string;
	getItemParsingState(): number;
	getItemText(id: string | number): string;
	getItemTooltip(id: string | number): string;
	getLevel(id: string | number): number;
	getOpenState(id: string | number): boolean;
	getParentId(id: string | number): string | number;
	getSelectedItemId(): string | number;
	getSelectedItemText(): string;
	getSubItems(id: string | number): any[];
	getUserData(id: string | number, name: string): any;
	getXMLState(): boolean;
	hasChildren(id: string | number): number;
	insertNewChild(parentId: string | number, id: string | number, text: string, actionHandler?: ICallable, image1?: string, image2?: string, image3?: string, optionStr?: string, children?: any): void;
	insertNewItem(parentId: string | number, id: string | number, text: string, actionHandler?: ICallable, image1?: string, image2?: string, image3?: string, optionStr?: string, children?: any): void;
	insertNewNext(nextToId: string | number, id: string | number, text: string, actionHandler?: ICallable, image1?: string, image2?: string, image3?: string, optionStr?: string, children?: any): void;
	isItemChecked(itemId: string | number): boolean;
	isLocked(id: string | number): boolean;
	load(url: string, call: ICallable, type: string): void;
	loadCSV(csvFile: string, afterCall: ICallable, type: string): void;
	loadCSVString(csvString: string, afterCall: ICallable, type: string): void;
	loadJSArray(JSArray: any[], afterCall: ICallable, type: string): void;
	loadJSArrayFile(jsarrayFile: string, afterCall: ICallable, type: string): void;
	loadJSON(jsonFile: string, afterCall: ICallable, type: string): void;
	loadJSONObject(jsonObject: any, afterCall: ICallable, type: string): void;
	loadOpenStates(name: string): void;
	loadState(name: string): void;
	loadXML(xmlFile: string, afterCall: ICallable, type: string): void;
	loadXMLString(xmlString: string, afterCall: ICallable, type: string): void;
	lockItem(id: string | number, mode: boolean): void;
	lockTree(mode: boolean): void;
	makeAllDraggable(func: ICallable): void;
	makeDraggable(obj: string | number | HTMLElement, func?: ICallable): void;
	moveItem(id: string | number, mode: string, targetId: string | number, targetTree?: any): void;
	openAllItems(id: string | number): void;
	openAllItemsDynamic(id: string | number): void;
	openItem(id: string | number): void;
	openItemsDynamic(list: string, flag: boolean): void;
	openOnItemAdded(mode: boolean): void;
	parse(data: string | { [key: string]: any; }, type: string): void;
	preventIECaching(mode: boolean): void;
	refreshItem(id: string | number): void;
	refreshItems(itemIdList: string, source: string): void;
	registerXMLEntity(rChar: string, rEntity: string): void;
	restoreSelectedItem(name: string): void;
	saveOpenStates(name?: string, cookieParam?: string): void;
	saveSelectedItem(name?: string, cookieParam?: string): void;
	saveState(name?: string, cookieParam?: string): void;
	selectItem(id: string | number, mode: boolean, preserve: boolean): void;
	serializeTree(): string;
	serializeTreeToJSON(): string;
	setAttribute(id: string | number, name: string, value: any): void;
	setCheck(id: string | number, state: string | number): void;
	setChildCalcHTML(htmlA: string, htmlB: string): void;
	setChildCalcMode(mode: string): void;
	setCustomSortFunction(func: ICallable): void;
	setDataMode(mode: string): void;
	setDragBehavior(mode: string, select: boolean): void;
	setEditStartAction(click: boolean, dblclick: boolean): void;
	setEscapingMode(mode: string): void;
	setIconSize(newWidth: string, newHeight: string, id?: string | number): void;
	setIconsPath(path: string): void;
	setImageArrays(arrayName: string, image1: string, image2: string, image3: string, image4: string, image5: string): void;
	setImagesPath(path: string): void;
	setItemCloseable(id: string | number, flag: boolean): void;
	setItemColor(id: string | number, defaultColor: string, selectedColor: string): void;
	setItemContextMenu(id: string | number, menu: any): void;
	setItemImage(id: string | number, im1: string, im2?: string): void;
	setItemStyle(id: string | number, styleString: string): void;
	setItemText(id: string | number, newLabel: string, newTooltip?: string): void;
	setItemTopOffset(id: string | number, value: number): void;
	setListDelimeter(separator: string): void;
	setLockedIcons(im0: string, im1: string, im2: string): void;
	setSerializationLevel(userData: boolean, fullXML: boolean, escapeEntities: boolean, userDataAsCData: boolean, DTD: boolean): void;
	setSkin(skin: string): void;
	setStdImages(im0: string, im1: string, im2: string): void;
	setSubChecked(id: string | number, state: boolean): void;
	setUserData(id: string | number, name: string, value: string | number): void;
	setXMLAutoLoading(filePath: string): void;
	setXMLAutoLoadingBehaviour(mode: string | number | ICallable): void;
	showItemCheckbox(id: string | number, state: boolean): void;
	showItemSign(id: string | number, state: boolean): void;
	smartRefreshBranch(id: string | number, source?: string): void;
	smartRefreshItem(id: string | number, source?: string): void;
	sortTree(nodeId: string | number, order: string, allLevels: boolean): void;
	stopEdit(): void;
	updateItem(itemId: any[], name: any[], im0: any[], im1: any[], im2: any[], checked: any[]): void;

}
type dhtmlXTreeGridEventName = 'onAfterCMove' | 'onAfterRowDeleted' | 'onAfterSorting' | 'onBeforeBlockSelected' | 'onBeforeCMove' | 'onBeforeContextMenu' | 'onBeforeDrag' | 'onBeforeFormSubmit' | 'onBeforePageChanged' | 'onBeforeRowDeleted' | 'onBeforeSelect' | 'onBeforeSorting' | 'onBlockRightClick' | 'onBlockSelected' | 'onCalendarShow' | 'onCellChanged' | 'onCellMarked' | 'onCellUnMarked' | 'onCheck' | 'onCheckbox' | 'onClearAll' | 'onCollectValues' | 'onColumnCollapse' | 'onColumnHidden' | 'onDataReady' | 'onDhxCalendarCreated' | 'onDistributedEnd' | 'onDrag' | 'onDragIn' | 'onDragOut' | 'onDrop' | 'onDynXLS' | 'onEditCancel' | 'onEditCell' | 'onEmptyClick' | 'onEnter' | 'onFilterEnd' | 'onFilterStart' | 'onGridReconstructed' | 'onGroup' | 'onGroupClick' | 'onGroupStateChanged' | 'onHeaderClick' | 'onKeyPress' | 'onLastRow' | 'onLiveValidationCorrect' | 'onLiveValidationError' | 'onMouseOver' | 'onOpenEnd' | 'onOpenStart' | 'onPageChanged' | 'onPaging' | 'onResize' | 'onResizeEnd' | 'onRightClick' | 'onRowAdded' | 'onRowCreated' | 'onRowDblClicked' | 'onRowHide' | 'onRowIdChange' | 'onRowInserted' | 'onRowPaste' | 'onRowSelect' | 'onScroll' | 'onSelectStateChanged' | 'onStatReady' | 'onSubAjaxLoad' | 'onSubGridCreated' | 'onSubRowOpen' | 'onSyncApply' | 'onTab' | 'onUndo' | 'onUnGroup' | 'onValidationCorrect' | 'onValidationError' | 'onXLE' | 'onXLS';

declare class dhtmlXTreeGrid {
	constructor(config: string | HTMLElement);
	addRow(new_id: string | number, text: any[], ind: number, parent_id: string | number, img: string, child: boolean): void;
	addRowAfter(new_id: string | number, text: any[], sibl_id: string | number, img: string, child: boolean): void;
	addRowBefore(new_id: string | number, text: any[], sibl_id: string | number, img: string, child: boolean): void;
	addRowFromClipboard(): void;
	adjustColumnSize(cInd: number): void;
	attachEvent(evName: dhtmlXTreeGridEventName, evHandler: ICallable): void;
	attachFooter(values: any[], style: any[]): void;
	attachHeader(values: any[], style: any[]): void;
	attachToObject(obj: any): void;
	cellById(row_id: string | number, col_ind: number): void;
	cellByIndex(row_ind: number, col_ind: number): void;
	cellToClipboard(rowId: string | number, cellInd: number): void;
	cells(row_id: string | number, col: number): dhtmlXCell;
	cells2(row_index: number, col: number): dhtmlXCell;
	changePage(pageNum: number): void;
	changePageRelative(ind: number): void;
	changeRowId(oldRowId: string | number, newRowId: string | number): void;
	checkAll(mode: boolean): void;
	clearAll(header: boolean): void;
	clearAndLoad(url: string, call: ICallable, type: string): void;
	clearChangedState(mode: boolean): void;
	clearConfigCookie(name: string): void;
	clearSelection(): void;
	closeItem(rowId: string | number): void;
	collapseAll(): void;
	collapseAllGroups(): void;
	collapseColumns(cInd: number): void;
	collapseGroup(val: string): void;
	collectTreeValues(column: number): any[];
	collectValues(column: number): any[];
	copyBlockToClipboard(): void;
	copyRowContent(from_row: string | number, to_row_id: string | number): void;
	deleteChildItems(rowId: string | number): void;
	deleteColumn(ind: number): void;
	deleteRow(row_id: string | number): void;
	deleteSelectedRows(): void;
	destructor(): void;
	detachEvent(id: string): void;
	detachFooter(index: number): void;
	detachHeader(index: number): void;
	disableUndoRedo(): void;
	doRedo(): void;
	doUndo(): void;
	doesRowExist(row_id: string | number): void;
	editCell(): void;
	editStop(ode: boolean): void;
	enableAccessKeyMap(): void;
	enableAlterCss(cssE: string, cssU: string, perLevel: boolean, levelUnique: boolean): void;
	enableAutoHeight(mode: boolean, maxHeight: number, countFullHeight: boolean): void;
	enableAutoHiddenColumnsSaving(name: string, cookie_param: string): void;
	enableAutoSaving(name: string, cookie_param: string): void;
	enableAutoSizeSaving(name: string, cookie_param: string): void;
	enableAutoWidth(mode: boolean, max_limit: number, min_limit: number): void;
	enableBlockSelection(mode: boolean): void;
	enableCSVAutoID(mode: boolean): void;
	enableCSVHeader(mode: boolean): void;
	enableCellIds(mode: boolean): void;
	enableColSpan(mode: boolean): void;
	enableColumnAutoSize(mode: boolean): void;
	enableColumnMove(mode: boolean, columns: string): void;
	enableContextMenu(menu: any): void;
	enableDistributedParsing(mode: boolean, count: number, time: number): void;
	enableDragAndDrop(mode: boolean): void;
	enableDragOrder(mode: boolean): void;
	enableEditEvents(click: boolean, dblclick: boolean, f2Key: boolean): void;
	enableEditTabOnly(state: boolean): void;
	enableExcelKeyMap(): void;
	enableHeaderImages(mode: boolean): void;
	enableHeaderMenu(list: string): void;
	enableKeyboardSupport(mode: boolean): void;
	enableLightMouseNavigation(mode: boolean): void;
	enableMarkedCells(mode: boolean): void;
	enableMathEditing(mode: boolean): void;
	enableMathSerialization(mode: boolean): void;
	enableMercyDrag(mode: boolean): void;
	enableMultiline(state: boolean): void;
	enableMultiselect(state: boolean): void;
	enableOrderSaving(name: string, cookie_param: string): void;
	enablePaging(mode: boolean, pageSize: number, pagesInGrp: number, pagingControlsContainer: number | HTMLElement, showRecInfo: boolean, pagingStateContainer: number | HTMLElement): void;
	enablePreRendering(buffer: number): void;
	enableResizing(list: string): void;
	enableRowsHover(mode: boolean, cssClass: string): void;
	enableRowspan(): void;
	enableSmartRendering(mode: boolean, buffer: number): void;
	enableSmartXMLParsing(mode: boolean): void;
	enableSortingSaving(name: string, cookie_param: string): void;
	enableStableSorting(mode: boolean): void;
	enableTooltips(list: string): void;
	enableTreeCellEdit(mode: boolean): void;
	enableTreeGridLines(mode: boolean): void;
	enableUndoRedo(): void;
	enableValidation(mode: boolean): void;
	expandAll(): void;
	expandAllGroups(): void;
	expandColumns(cInd: number): void;
	expandGroup(val: string): void;
	filterBy(column: number, value: string, preserve: boolean): void;
	filterByAll(): void;
	filterTreeBy(column: number, value: string, preserve: boolean): void;
	findCell(value: string, c_ind: number, first: boolean): void;
	forEachCell(rowId: string | number, custom_code: ICallable): void;
	forEachRow(custom_code: ICallable): void;
	forEachRowInGroup(name: string, custom_code: ICallable): void;
	forceFullLoading(buffer: number): void;
	forceLabelSelection(mode: boolean): void;
	getAllRowIds(separator: string): string;
	getAllSubItems(rowId: string | number): any[];
	getChangedRows(nd_added: boolean): string;
	getCheckedRows(col_ind: number): string;
	getChildItemIdByIndex(rowId: string | number, ind: number): string | number;
	getColIndexById(id: number): number;
	getColLabel(cin: number, ind: number): string;
	getColType(cInd: number): string;
	getColTypeById(cID: string | number): string;
	getColWidth(ind: number): number;
	getColumnCombo(column_index: number): any;
	getColumnId(cin: number): string | number;
	getColumnLabel(cin: number, ind: number): string;
	getColumnsNum(): number;
	getCombo(col_ind: number): any;
	getCustomCombo(id: string | number, ind: number): any;
	getFilterElement(index: number): any;
	getFooterLabel(cin: number, ind: number, mode: boolean): string;
	getHeaderMenu(columns: any): any;
	getItemIcon(rowId: string | number): string;
	getItemImage(rowId: string | number): string;
	getItemText(rowId: string | number): string;
	getLevel(rowId: string | number): number;
	getMarked(): any[];
	getOpenState(rowId: string | number): boolean;
	getParentId(rowId: string | number): string | number;
	getRedo(): any[];
	getRowAttribute(rId: string | number, name: string): any;
	getRowId(ind: number): string | number;
	getRowIndex(row_id: string | number): number;
	getRowsNum(): number;
	getSelectedBlock(): any;
	getSelectedCellIndex(): number;
	getSelectedRowId(): string | number;
	getSortingState(): string;
	getStateOfView(): any[];
	getSubItems(rowId: string | number): string;
	getUndo(): any[];
	getUserData(row_id: string | number, name: string): any;
	gridFromClipboard(): void;
	gridToClipboard(): void;
	gridToGrid(rowId: string | number, sgrid: any, tgrid: any): void;
	gridToTreeElement(treeObj: any, treeNodeId: string | number, gridRowId: string | number): void;
	groupBy(ind: number, mask: any[]): void;
	groupStat(key: string, ind: number, item: string): number;
	hasChildren(rowId: string | number): number;
	init(): void;
	insertColumn(ind: number, header: string, type: string, width: number, sort: string, align: string, valign: string, reserved: any, columnColor: string): void;
	isColumnHidden(ind: number): void;
	load(url: string, call: ICallable, type: string): void;
	loadHiddenColumnsFromCookie(name: string): void;
	loadOpenStates(name: string): void;
	loadOrderFromCookie(name: string): void;
	loadSizeFromCookie(name: string): void;
	loadSortingFromCookie(name: string): void;
	lockRow(rowId: string | number, mode: boolean): void;
	makeFilter(id: number | HTMLElement, column: number, preserve: boolean): void;
	makeSearch(id: string | number | HTMLElement, column: number): void;
	mark(row: string | number, cInd: number, state: boolean): void;
	moveColumn(oldInd: number, newInd: number): void;
	moveRow(rowId: string | number, mode: string, targetId?: string | number, targetGrid?: any): void;
	moveRowDown(row_id: string | number): void;
	moveRowTo(srowId: string | number, trowId: string | number, mode: string, dropmode?: string, sourceGrid?: any, targetGrid?: any): void;
	moveRowUp(row_id: string | number): void;
	openItem(rowId: string | number): void;
	parse(data: string | { [key: string]: any; }, type?: string): void;
	pasteBlockFromClipboard(): void;
	post(url: string, post: string, call: ICallable, type: string): void;
	preventIECaching(mode: boolean): void;
	printView(before: string, after: string): void;
	refreshComboColumn(index: number): void;
	refreshFilters(): void;
	refreshMath(): void;
	registerCList(col: number, list: any[]): void;
	rowToClipboard(rowId: string | number): void;
	rowToDragElement(id: string | number): void;
	saveHiddenColumnsToCookie(name: string, cookie_param: string): void;
	saveOpenStates(name: string): void;
	saveOrderToCookie(name: string, cookie_param: string): void;
	saveSizeToCookie(name: string, cookie_param: string): void;
	saveSortingToCookie(name: string, cookie_param: string): void;
	selectAll(): void;
	selectBlock(start_row: string | number, start_col: number, end_row: string | number, end_column: number): void;
	selectCell(row: number | HTMLElement, cInd: number, preserve: boolean, edit: boolean, show: boolean): void;
	selectRow(row: number | HTMLElement, fl: boolean, preserve: boolean, show: boolean): void;
	selectRowById(row_id: string | number, preserve: boolean, show: boolean, call: boolean): void;
	serialize(): void;
	serializeToCSV(text_only: boolean): void;
	setActive(mode: boolean): void;
	setAwaitedRowHeight(height: number): void;
	setCSVDelimiter(str: string): void;
	setCellExcellType(rowId: string | number, cellIndex: number, type: string): void;
	setCellTextStyle(row_id: string | number, ind: number, styleString: string): void;
	setCheckedRows(col_ind: number, v: number): void;
	setColAlign(alStr: string): void;
	setColLabel(col: number, ind: number): void;
	setColSorting(sortStr: string): void;
	setColTypes(typeStr: string): void;
	setColVAlign(valStr: string): void;
	setColValidators(vals: string): void;
	setColWidth(ind: number, value: string): void;
	setColspan(row_id: string | number, col_index: number, colspan: number): void;
	setColumnColor(clr: string): void;
	setColumnExcellType(colIndex: number, type: string): void;
	setColumnHidden(ind: number, state: boolean): void;
	setColumnId(ind: number, id: string | number): void;
	setColumnIds(ids: string): void;
	setColumnLabel(col: number, ind: number): void;
	setColumnMinWidth(width: number, ind: number): void;
	setColumnsVisibility(list: string): void;
	setCustomSorting(func: ICallable, col: number): void;
	setDateFormat(mask: string, server_mask: string): void;
	setDelimiter(delim: string): void;
	setDragBehavior(mode: string): void;
	setEditable(mode: boolean): void;
	setExternalTabOrder(start: string | number | HTMLElement, end: string | number | HTMLElement): void;
	setFieldName(name: string): void;
	setFiltrationLevel(level: number, show_upper: boolean): void;
	setFooterLabel(col: number, label: string, ind: number): void;
	setHeader(hdrStr: string, splitSign: string, styles: any[]): void;
	setIconsPath(path: string): void;
	setIconset(name: string): void;
	setImageSize(width: number, height: number): void;
	setImagesPath(path: string): void;
	setInitWidths(wp: string): void;
	setInitWidthsP(wp: string): void;
	setItemCloseable(rowId: string | number, status: boolean): void;
	setItemIcon(rowId: string | number, icon: string): void;
	setItemImage(rowId: string | number, url: string): void;
	setItemText(rowId: string | number, newtext: string): void;
	setMathRound(digits: number): void;
	setNoHeader(fl: boolean): void;
	setNumberFormat(mask: string, cInd: number, p_sep: string, d_sep: string): void;
	setOnOpenEndHandler(func: ICallable): void;
	setOnOpenStartHandler(func: ICallable): void;
	setPagingSkin(name: string): void;
	setPagingTemplates(navigation_template: string, info_template: string): void;
	setPagingWTMode(navButtons: boolean, navLabel: boolean, pageSelect: boolean, perPageSelect: boolean | any[]): void;
	setRowAttribute(id: string | number, name: string, value: any): void;
	setRowColor(row_id: string | number, color: string): void;
	setRowExcellType(rowId: string | number, type: string): void;
	setRowHidden(id: string | number, state: boolean): void;
	setRowId(ind: number, row_id: string | number): void;
	setRowTextBold(row_id: string | number): void;
	setRowTextNormal(row_id: string | number): void;
	setRowTextStyle(row_id: string | number, styleString: string): void;
	setRowspan(rowID: string | number, colInd: number, length: number): void;
	setSerializableColumns(list: string): void;
	setSerializationLevel(userData: boolean, selectedAttr: boolean, config: boolean, changedAttr: boolean, onlyChanged: boolean, asCDATA: boolean): void;
	setSizes(): void;
	setSkin(name: string): void;
	setSortImgState(state: boolean, ind: number, order: string, row: number): void;
	setStyle(ss_header: string, ss_grid: string, ss_selCell: string, ss_selRow: string): void;
	setSubGrid(subgrid: any, sInd: number, tInd: number): void;
	setSubTree(subgrid: any, sInd: number): void;
	setTabOrder(order: string): void;
	setUserData(row_id: string | number, name: string, value: any): void;
	showRow(rowID: number | string): void;
	sortRows(col: number, type: string, order: string): void;
	sortTreeRows(col: number, type: string, order: string): void;
	splitAt(ind: number): void;
	startFastOperations(): void;
	stopFastOperations(): void;
	submitAddedRows(mode: boolean): void;
	submitColumns(inds: string): void;
	submitOnlyChanged(mode: boolean): void;
	submitOnlyRowID(mode: boolean): void;
	submitOnlySelected(mode: boolean): void;
	submitSerialization(mode: boolean): void;
	toExcel(path: string): void;
	toPDF(path: string): void;
	treeToGridElement(treeObj: any, treeNodeId: string | number, gridRowId: string | number): void;
	uid(): void;
	unGroup(): void;
	uncheckAll(): void;
	unmarkAll(): void;
	updateCellFromClipboard(rowId?: string | number, cellInd?: number): void;
	updateFromXML(url: string, insert_new: boolean, del_missed: boolean, afterCall: ICallable): void;
	updateGroups(): void;
	updateRowFromClipboard(rowId?: string | number): void;
	validateCell(id: string | number, index: number, rule: ICallable): void;

	csvParser: any;
	editor: any;
	kidsXmlFile: string;
}
type dhtmlXTreeViewObjectEventName = 'onAddItem' | 'onBeforeCheck' | 'onBeforeDeleteItem' | 'onBeforeDrag' | 'onBeforeDrop' | 'onCheck' | 'onContextMenu' | 'onDeleteItem' | 'onDragOver' | 'onDrop' | 'onSelect' | 'onTextChange' | 'onXLE' | 'onXLS';

declare class dhtmlXTreeViewObject {
	constructor(config: IdhtmlXTreeViewConfig);
	addItem(id: string | number, text: string, parentId: string | number, index: number): void;
	attachEvent(name: dhtmlXTreeViewObjectEventName, handler: ICallable): number;
	checkItem(id: string | number): void;
	clearAll(): void;
	closeItem(id: string | number): void;
	deleteItem(id: string | number): void;
	detachEvent(id: number): void;
	disableCheckbox(id: string | number): void;
	enableCheckbox(id: string | number): void;
	enableCheckboxes(mode: boolean): void;
	enableContextMenu(mode: boolean): void;
	enableDragAndDrop(mode: boolean): void;
	enableMultiselect(mode: boolean): void;
	getAllChecked(): any[];
	getAllUnchecked(): any[];
	getItemText(id: string | number): string;
	getParentId(id: string | number): string | number;
	getSelectedId(): string | number;
	getSubItems(id: string | number): any[];
	getUserData(id: string | number, name: string): string | number | boolean;
	hideCheckbox(id: string | number): void;
	isCheckboxEnabled(id: string | number): boolean;
	isCheckboxVisible(id: string | number): boolean;
	isItemChecked(id: string | number): boolean;
	loadStruct(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	openItem(id: string): void;
	selectItem(id: string | number): void;
	setIconColor(id: string | number, color: string): void;
	setIconset(name: string): void;
	setItemIcons(id: string | number, icons: any): void;
	setItemText(id: string | number, text: string): void;
	setSizes(): void;
	setSkin(skin: string): void;
	setUserData(id: string | number, name: string, value: string): void;
	showCheckbox(id: string | number): void;
	silent(callback: ICallable): void;
	uncheckItem(id: string | number): void;
	unload(): void;
	unselectItem(id: string | number): void;

}
type dhtmlXVaultObjectEventName = 'onBeforeClear' | 'onBeforeFileAdd' | 'onBeforeFileRemove' | 'onClear' | 'onDrop' | 'onFileAdd' | 'onFileRemove' | 'onUploadCancel' | 'onUploadComplete' | 'onUploadFail' | 'onUploadFile';

declare class dhtmlXVaultObject {
	constructor(config: IdhtmlXVaultConfig);
	addDraggableNode(nodeId: string | number | HTMLElement, fileData: any): void;
	addFileRecord(fileData: any, status: string): void;
	attachEvent(name: dhtmlXVaultObjectEventName, handler: ICallable): number;
	clear(): void;
	create(): void;
	detachEvent(id: number): void;
	disable(): void;
	enable(): void;
	getData(): any;
	getFileExtension(fileName: string): string;
	getMaxFileSize(): number;
	getSLVersion(): void;
	getStatus(): number;
	load(data: string | { [key: string]: any; }, doOnLoad?: ICallable): void;
	onAddFile(): void;
	onFileUploaded(): void;
	onUploadComplete(): void;
	readableSize(size: number): string;
	removeDraggableNode(nodeId: string | number | HTMLElement): void;
	setAutoRemove(mode: boolean): void;
	setAutoStart(mode: boolean): void;
	setDownloadURL(url: string): void;
	setFilesLimit(count: number): void;
	setFormField(): void;
	setHeight(height: number): void;
	setImagePath(): void;
	setMaxFileSize(size: number): void;
	setProgressMode(mode: string): void;
	setSLURL(slUrl: string): void;
	setSWFURL(swfUrl: string): void;
	setServerHandlers(): void;
	setSizes(): void;
	setSkin(skin: string): void;
	setStrings(data: any): void;
	setURL(uploadUrl: string): void;
	setWidth(width: number): void;
	unload(): void;
	upload(): void;

	icons: boolean;
	strings: boolean;
}
type dhtmlXWindowsEventName = 'onBeforeMoveStart' | 'onBeforeResizeStart' | 'onClose' | 'onContentLoaded' | 'onFocus' | 'onHelp' | 'onHide' | 'onMaximize' | 'onMinimize' | 'onMoveCancel' | 'onMoveFinish' | 'onParkDown' | 'onParkUp' | 'onResizeCancel' | 'onResizeFinish' | 'onShow' | 'onStick' | 'onUnStick';

declare class dhtmlXWindows {
	constructor(config?: IdhtmlXWindowsConfig | string);
	attachContextMenu(config: any): dhtmlXMenuObject;
	attachEvent(name: dhtmlXWindowsEventName, handler: ICallable): number;
	attachViewportTo(objId: string): void;
	createWindow(id: string, x: number, y: number, width: number, height: number): void;
	detachContextMenu(menuObj: any): void;
	detachEvent(id: number): void;
	enableAutoViewport(): void;
	findByText(text: string): any[];
	forEachWindow(handler: ICallable): void;
	getBottommostWindow(): any;
	getContextMenu(): dhtmlXMenuObject;
	getEffect(): void;
	getTopmostWindow(visibleOnly: boolean): any;
	isWindow(id: string): boolean;
	setEffect(): void;
	setImagePath(): void;
	setSkin(skin: string): void;
	setViewport(x: number, y: number, width: number, height: number, parentObj: HTMLElement): void;
	unload(): void;
	window(id: string): any;

}
type dhtmlXWindowsButtonEventName = 'onClick';

declare class dhtmlXWindowsButton {
	constructor(config?: any);
	attachContextMenu(config: any): dhtmlXMenuObject;
	attachEvent(name: dhtmlXWindowsButtonEventName, handler: ICallable): number;
	detachContextMenu(menuObj: any): void;
	detachEvent(id: number): void;
	disable(): void;
	enable(): void;
	getContextMenu(): dhtmlXMenuObject;
	hide(): void;
	isEnabled(): boolean;
	isHidden(): boolean;
	setCss(style: string): void;
	show(): void;

}
type dhtmlXWindowsCellEventName = 'onBeforeMoveStart' | 'onBeforeResizeStart' | 'onClose' | 'onContentLoaded' | 'onFocus' | 'onHelp' | 'onHide' | 'onMaximize' | 'onMinimize' | 'onMoveCancel' | 'onMoveFinish' | 'onParkDown' | 'onParkUp' | 'onResizeCancel' | 'onResizeFinish' | 'onShow' | 'onStick' | 'onUnStick';

declare class dhtmlXWindowsCell extends dhtmlXCell {
	constructor(config?: any);
	addUserButton(id: string, pos: number, title: string, label: string): void;
	adjustPosition(): void;
	allowMove(): void;
	allowPark(): void;
	allowResize(): void;
	appendObject(obj: string | number | HTMLElement): void;
	attachAccordion(conf: any): dhtmlXAccordion;
	attachCarousel(width: number, height: number, conf: any): dhtmlXCarousel;
	attachChart(conf: any): dhtmlXChart;
	attachDataView(conf: any): dhtmlXDataView;
	attachEditor(): dhtmlXEditor;
	attachForm(conf: any): dhtmlXForm;
	attachGrid(): dhtmlXGridObject;
	attachHTMLString(htmlString: string): void;
	attachLayout(conf: any): dhtmlXLayoutObject;
	attachList(conf: any): dhtmlXList;
	attachMap(opts?: any): any;
	attachMenu(conf?: any): dhtmlXMenuObject;
	attachObject(obj: any): void;
	attachRibbon(conf?: any): dhtmlXRibbon;
	attachScheduler(day?: Date, mode?: string, contId?: string, scheduler?: dhtmlXScheduler): dhtmlXScheduler;
	attachSidebar(conf?: any): dhtmlXSideBar;
	attachStatusBar(conf?: any): { [key: string]: any; };
	attachTabbar(conf?: any): dhtmlXTabBar;
	attachToolbar(conf?: any): dhtmlXToolbarObject;
	attachTree(rootId?: any): dhtmlXTreeObject;
	attachTreeView(conf?: any): dhtmlXTreeViewObject;
	attachURL(url: string, ajax?: boolean, postData?: any): void;
	attachVault(conf: any): dhtmlXVaultObject;
	bringToBottom(): void;
	bringToTop(): void;
	button(id: string): any;
	center(): void;
	centerOnScreen(): void;
	clearIcon(): void;
	close(): void;
	denyMove(): void;
	denyPark(): void;
	denyResize(): void;
	detachContextMenu(menuObj: any): void;
	detachEvent(id: number): void;
	detachMenu(): void;
	detachObject(remove?: boolean, moveTo?: string | number | HTMLElement): void;
	detachRibbon(): void;
	detachStatusBar(): void;
	detachToolbar(): void;
	getAttachedMenu(): dhtmlXMenuObject;
	getAttachedObject(): any;
	getAttachedRibbon(): dhtmlXRibbon;
	getAttachedStatusBar(): any;
	getAttachedToolbar(): dhtmlXToolbarObject;
	getContextMenu(): dhtmlXMenuObject;
	getDimension(): any[];
	getFrame(): HTMLElement;
	getIcon(): void;
	getId(): string | number;
	getMaxDimension(): any[];
	getMinDimension(): number;
	getPosition(): any[];
	getText(): string;
	getViewName(): string;
	hide(): void;
	hideHeader(): void;
	hideMenu(): void;
	hideRibbon(): void;
	hideStatusBar(): void;
	hideToolbar(): void;
	isHidden(): boolean;
	isMaximized(): boolean;
	isModal(): boolean;
	isMovable(): boolean;
	isOnBottom(): boolean;
	isOnTop(): boolean;
	isParkable(): boolean;
	isParked(): boolean;
	isResizable(): boolean;
	isSticked(): boolean;
	keepInViewport(state: boolean): void;
	maximize(): void;
	minimize(): void;
	park(): void;
	progressOff(): void;
	progressOn(): void;
	reloadURL(): void;
	removeUserButton(id: string): void;
	restoreIcon(): void;
	setDimension(width: number, height: number): void;
	setIcon(): void;
	setIconCss(style: string): void;
	setMaxDimension(maxWidth: number, maxHeight: number): void;
	setMinDimension(minWidth: number, minHeight: number): void;
	setModal(state: boolean): void;
	setPosition(x: number, y: number): void;
	setText(text: string): void;
	setToFullScreen(): void;
	show(): void;
	showHeader(): void;
	showInnerScroll(): void;
	showMenu(): void;
	showRibbon(): void;
	showStatusBar(): void;
	showToolbar(): void;
	showView(name: string): boolean;
	stick(): void;
	unloadView(name: string): void;
	unstick(): void;

}
